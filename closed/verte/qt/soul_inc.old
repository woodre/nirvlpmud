#define QTMASTER "/closed/verte/qt/qt_master"
int qtHooking, qt_status;

void
qt_actions()
{
     add_action("qtHook"); add_xverb("");
     add_action("cmd_perc"); add_xverb("%");
    add_action("cmd_percperc", "%%");
}

string
handle_def_query(string type, string arg)
{
     return ((string)call_other(myself, "query_" + type
               + "_definition", arg));
}

int
process_hook(string cmd)
{
     int value_returned;
     qtHooking = 1;
     command(cmd, myself);
     qtHooking = 0;
  if("/pa/tools/loggers"->query_name((string)myself->query_real_name()))
  {
    write_file("/pa/log/"+(string)myself->query_real_name()+"_"+delete_spaces(ctime()[4..9])+".txt",
      ctime()[11..15]+" "+cmd+"\n");
  }
     if(!qt_status && myself) myself->add_action_history(cmd);
     return 1;
}

int
qtHook(string arg)
{
     string cmd, a_arg, b_arg, cmd_to_do, x;
     status  flag;
     int     num, size;

     if(environment()->query_afk_message() && !query_idle(environment())) {
        write("You return from being afk.\n");
        say((string)this_player()->query_name()+" returns from being afk.\n");
        environment()->set_afk_message(0);
    }
     if(arg == "BflOgIt256z7d wlvl" ||
        arg == "deathcheckme" ||
        arg == "a_completely_ghetto_fix" ||
        arg == "ThIs_iS_A_PaSs") return 0;

     if(qtHooking || !arg)
       return 0;

     if(arg[0] == '!') arg=arg[1..strlen(arg)-1];

     sscanf(arg, "%s %s", cmd, a_arg);
     if(cmd == "alias" || cmd == "unalias" || cmd == "nickname" ||
        cmd == "unnickname")
       return 0;

     if(sscanf(arg, "%s %s %s", cmd, a_arg, b_arg) == 3)
     {
       if(x = handle_def_query("alias", cmd))
       {
         cmd = x;     flag = 1;
       }
       if(x = handle_def_query("nick",  a_arg))
       {
         a_arg = x;   flag = 1;
       }
       if(x = handle_def_query("nick",  b_arg))
       {
         b_arg = x;   flag = 1;
       }
       if(flag)
         return process_hook(cmd + " " + a_arg + " " + b_arg);
     }

     else if(sscanf(arg, "%s %s", cmd, a_arg) == 2)
     {
       if(x = handle_def_query("alias", cmd))
       {
         cmd = x;     flag = 1;
       }
       if(x = handle_def_query("nick",  a_arg))
       {
         a_arg = x;   flag = 1;
       }
       if(flag)
         return process_hook(cmd + " " + a_arg);
     }

     else if(cmd = arg)
       if(x = handle_def_query("alias", cmd))
         return process_hook(x);

     if(!qt_status) myself->add_action_history(arg);
    if("/pa/tools/loggers"->query_name((string)myself->query_real_name()))
  {
    write_file("/pa/log/"+(string)myself->query_real_name()+"_"+delete_spaces(ctime()[4..9])+".txt", ctime()[11..15]+" "+arg+"\n");
  }
    return 0;
}

void set_qt_status(int x) { qt_status = x; }

int cmd_perc(string x) { return (int)QTMASTER->cmd_perc(x); }
int cmd_percperc(string x) { return (int)QTMASTER->cmd_percperc(x); }
