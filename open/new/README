This dir contains a working example of proposed modifications to base files, anda proposed standard to implemented across the mud.
The files are organized as follow:
monster.c:  Copy of monster.c in /obj, with updates
room.c Copy of room.c in /room with updates
test_obj.c Introductory object that lets you test new features. test_obj
  mocks the functions of, say a guild object. Clone it
   to start demo-ing the code.
test_room.c: example room using new features. notice it uses realm() { return "NT"; }
   this is to show backwards compatability, there is a way of coding rooms
   as no teleport with the new methods. This comaptability thing just 
prevents wizards from having to code extra to accomidate unmodified old
code.
test_mon.c a test monster that uses the new stuff.

Notice that checks are routed through the monster driver, to the room driver
Hence a monster can block teleports, but players can be allowed to teleport 
once he dies. Or, the room can block it. In either case, the check should
go through the monster in most cases. If a monster is not being focused on
like the player is not in combat, then
the room should first be checked for other monsters, and then, if there are
none, the room itself should be checked...i'll set up a function to handle this
better later on. (i.e. don't implement this just yet bolts :)
attribs.h is an *example* header file with *example* attributes. Nobody
is required to stick to these. In fact, i suggest we collaborate and work
up a good, solid list of features we want to
set up. blah
Uhh, what else is there...
Ok. This is a rough draft, per say. nice little 30 minute job i did, lag and
brain lag included in that. I'm tired. It's not an example of coding talent,
nor an example of how to transfer sps/hps, just an example of proposed code.
Dump any questions you have on me. let's keep comments and suggestions to the
wiz channel and guild board how about. Err wiz board
See, i told you i'm out of it. And i don't have backspace either.
-Dan
