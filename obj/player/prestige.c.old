/******************************************************************************
 * Program: prestige.c
 * Path: /obj/player
 * Type: Include file for player.c
 * Created: Apr 08, 2014 by Dragnar
 *
 * Purpose: Variables and functions that are needed for prestige levels.
 * 
 * History:
 *          04/10/2014 - Gnar
 *            Created
 ******************************************************************************/

#define PRES_SKILL_EXP   prestige_skills[0]
#define PRES_SKILL_WC    prestige_skills[1]
#define PRES_SKILL_AC    prestige_skills[2]
#define PRES_SKILL_GOLD  prestige_skills[3]
#define PRES_SKILL_REGSP prestige_skills[4]
#define PRES_SKILL_REGHP prestige_skills[5]
#define PRES_SKILL_DETOX prestige_skills[6]
#define PRES_SKILL_HPS   prestige_skills[7]
#define PRES_SKILL_SPS   prestige_skills[8]

#define PRES_GUILD_FILE prestige_guild[0]
#define PRES_GUILD_NAME prestige_guild[1]
#define PRES_GUILD_RANK prestige_guild[2]
#define PRES_GUILD_EXP  prestige_guild[3]
#define PRES_GUILD_HOME prestige_guild[4]

#define VALID_PRES_SKILL ({ "exp", "wc", "ac", "gold", "regsp",\
                            "reghp", "detox", "hps", "sps" })

#define VALID_PRES_GUILD ({ "FILE", "NAME", "RANK", "EXP", "HOME" })                       
                            
int prestige_level;
int prestige_xp;
int prestige_qp;
int prestige_skill_points;
mixed *prestige_guild;
int *prestige_skills;

set_prestige_level( int amt ) { 
  log_file("PRESTIGE_ADVANCE", ctime() + " " +query_name()+" advanced from prestige level "+prestige_level+" to prestige level "+amt+"\n");
  prestige_level = amt;
  save_me();
}
query_prestige_level() { return prestige_level; }
add_prestige_level( int amt ) { set_prestige_level( prestige_level + amt ); }

set_prestige_xp( int amt ) { prestige_xp = amt/1000; }
query_prestige_xp() { return prestige_xp; }
add_prestige_xp( int amt ) { prestige_xp += amt/1000; }

transfer_prestige_xp() {
  int cur_xp;
  cur_xp = query_exp();
  set_prestige_xp ( cur_xp );
  add_exp( -query_exp() );
}

set_prestige_qp( int amt ) { prestige_qp = amt; }
query_prestige_qp() { return prestige_qp; }
add_prestige_qp( int amt ) { prestige_qp += amt; }

transfer_prestige_qp() {
  prestige_qp += quest_point;
  quests = 0;
  quest_point = 0;
}

set_prestige_skillpt( int amt ) { 
  prestige_skill_points = amt; 
}
query_prestige_skillpt() { return prestige_skill_points; }
add_prestige_skillpt( int amt ) { prestige_skill_points += amt; }

query_prestige_score() { return (experience / 1000) + prestige_xp + ( (prestige_qp + quest_point) * 100); }

query_prestige_guild( string attr ) {
  
  switch( attr ) {
    case "GUILD_FILE":
      return PRES_GUILD_FILE;
      break;
    case "GUILD_NAME":
      return PRES_GUILD_NAME;
      break;
    case "GUILD_RANK":
      return PRES_GUILD_RANK;
      break;
    case "GUILD_EXP":
      return PRES_GUILD_EXP;
      break;
    case "GUILD_HOME":
      return PRES_GUILD_HOME;
      break;
    default:
      return 0;
      break;
  }
}

set_prestige_guild( string attr, mixed value ) {
  
  if( !attr || !strlen( attr ) ) {
    PRES_GUILD_FILE = query_guild_file();
    PRES_GUILD_NAME = query_guild_name();
    PRES_GUILD_RANK = query_guild_rank();
    PRES_GUILD_EXP = query_guild_exp();
    PRES_GUILD_HOME = query_home();
    set_guild_file( 0 );
    set_guild_name( 0 );
    set_guild_rank( 0 );
    set_guild_exp( 0 );
    set_home( 0 );
    return 1;
  }
  
  switch( attr ) {
    case "GUILD_FILE":
      PRES_GUILD_FILE = value;
      break;
    case "GUILD_NAME":
      PRES_GUILD_NAME = value;
      break;
    case "GUILD_RANK":
      PRES_GUILD_RANK = value;
      break;
    case "GUILD_EXP":
      PRES_GUILD_EXP = value;
      break;
    case "GUILD_HOME":
      PRES_GUILD_HOME = value;
      break;
    default:
      break;
  }
}

restore_prestige_guild() {
  object gob;
  
  write("Prestige guild file: "+ PRES_GUILD_FILE +"\n");
  set_guild_file( PRES_GUILD_FILE );
  set_guild_name( PRES_GUILD_NAME );
  set_guild_rank( PRES_GUILD_RANK );
  set_guild_exp( PRES_GUILD_EXP );
  set_home( PRES_GUILD_HOME );
  move_object( clone_object( query_guild_file() ), this_player() );
  PRES_GUILD_FILE = 0;
  PRES_GUILD_NAME = 0;
  PRES_GUILD_RANK = 0;
  PRES_GUILD_EXP = 0;
  PRES_GUILD_HOME = 0;
}

string *valid_prestige_skill() { return VALID_PRES_SKILL; }

set_prestige_skill( string skill, int amount ) {
  
  if( !skill || !strlen(skill) )
    return 0;
    
  skill = lower_case( skill );
  
  if( member( VALID_PRES_SKILL, skill ) < 0 )
    return 0;
    
  log_file("PRESTIGE_SKILLS", ctime() + " " +query_name()+" set "+skill+" to: "+amount+"\n");
    
  switch( skill ) {
    case "exp":
      PRES_SKILL_EXP = amount;
      break;
    case "wc":
      PRES_SKILL_WC = amount;
      break;
    case "ac":
      PRES_SKILL_AC = amount;
      break;
    case "gold":
      PRES_SKILL_GOLD = amount;
      break;
    case "regsp":
      PRES_SKILL_REGSP = amount;
      break;
    case "reghp":
      PRES_SKILL_REGHP = amount;
      break;
    case "detox":
      PRES_SKILL_DETOX = amount;
      break;
    case "sps":
      PRES_SKILL_SPS = amount;
      break;
    case "hps":
      PRES_SKILL_HPS = amount;
      break;
    default:
      break;
  }
}

add_prestige_skill( string skill, int amount ) {
  
  if( !skill || !strlen(skill) )
    return 0;
    
  skill = lower_case( skill );
  
  set_prestige_skill( skill, query_prestige_skill( skill ) + 1 );
}

query_prestige_skill( string skill ) {

  if( !skill || !strlen(skill) )
    return 0;
    
  skill = lower_case( skill );
    
  switch( skill ) {
    case "exp":
      return PRES_SKILL_EXP;
      break;
    case "wc":
      return PRES_SKILL_WC;
      break;
    case "ac":
      return PRES_SKILL_AC;
      break;
    case "gold":
      return PRES_SKILL_GOLD;
      break;
    case "regsp":
      return PRES_SKILL_REGSP;
      break;
    case "reghp":
      return PRES_SKILL_REGHP;
      break;
    case "detox":
      return PRES_SKILL_DETOX;
      break;
    case "sps":
      return PRES_SKILL_SPS;
      break;
    case "hps":
      return PRES_SKILL_HPS;
      break;
    default:
      return 0;
      break;
  }
}
