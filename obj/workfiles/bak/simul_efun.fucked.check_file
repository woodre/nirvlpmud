/*
// This is a mudlib file.
// The functions defined in this file should only be replacements of efuns
// no longer supported. Don't use these functions any longer, use the
// replacement instead.
*/

inherit "/obj/simul_efun/resolv_path";
inherit "/obj/simul_efun/loadObject";
inherit "/obj/simul_efun/check_file";
inherit "/obj/simul_efun/exclude_array";
inherit "/obj/simul_efun/emit_channel";
inherit "/obj/simul_efun/destruct";
inherit "/obj/simul_efun/m_efuns";
inherit "/obj/simul_efun/matching_arrays";
inherit "/obj/simul_efun/expand_month";
inherit "/obj/simul_efun/basename";
inherit "/closed/verte/command_efun";
inherit "/obj/simul_efun/valid_player";
inherit "/obj/simul_efun/same_array";

#pragma strict_types
#pragma save_types

/*
// The old 'slice_array' is no longer needed. Use range argument inside
// a pair of brackets instead.
*/
mixed *slice_array(mixed *arr, int from, int to) {
  return arr[from..to];
}

/*
// filter_objects() has been renamed to filter_array().
*/
mixed *filter_objects(mixed *list, string str, object ob, mixed extra) {
  return filter_array(list, str, ob, extra);
}

/*
// Define functions to return the proper third person pronoun based on
// gender.
*/
string
subjective(object ob) {
  string gender;
  if (!ob) {
    ob = this_player();
    if (!ob)
      return "it";
  }
  gender = (string)ob->query_gender();
  if (gender == "male")
    return "he";
  else if (gender == "female")
    return "she";
  else
    return "it";
}

string
objective(object ob) {
  string gender;

  if (!ob) {
    ob = this_player();
    if (!ob)
      return "it";
  }
  gender = (string)ob->query_gender();
  if (gender == "male")
    return "him";
  else if (gender == "female")
    return "her";
  else
    return "it";
}

string
possessive(object ob) {
  string gender;

  if (!ob) {
    ob = this_player();
    if (!ob)
      return "its";
  }
  gender = (string)ob->query_gender();
  if (gender == "male")
    return "his";
  else if (gender == "female")
    return "her";
  else
    return "its";
}
mixed snoop(mixed snoopee) {
  if(snoopee && this_player()->query_level() < snoopee->query_level()){
    write("Failed.\n");
    return 1;
   }
if(snoopee)
 efun::snoop(snoopee);
else efun::snoop();
}
int tell_object_wblock(object to, string what) {
  object from;
  if(this_player()) from = this_player();
  if(!from) { efun::tell_object(to,what); return 1;}
  if(from->query_level() < 21 && !from->query_npc()) 
  if(to->query_tellblock(from)) { 
    efun::tell_object(from,to->query_name()+" is blocking you.\n");
    return 1;
  }
  efun::tell_object(to,what);
}

/*  mal is a whiner.

     WAH WAH WAH LOOK AT ME IM MAL.. cry :)

     hehe
void wizlist();
*/

void dumb();  /* heh.. */
void break_point(); /* YAY */

string
delete_spaces(string arg)
{
    return (implode(explode(arg, " "), ""));
}

/* Simul_efun: resolve_path()
 * string resolve_path(string arg)
 *
 * See /doc/efun/resolve_path
 *
 * - Earwax 5/20/04
 *
 * Added ~/ support, cleaned up code a wee bit.
 * also changed file_size() check to 
 *  .... check_file()
 * [verte] <5-20-04>
*/

string resolve_path(string arg)
{
  int i, siz;
  string junk, junk2, path, filename, *args;
  object y;

  if (!arg) return 0;
  if (arg == "/") return arg;
    
  y = this_player();

  if (text_contains(arg, "~"))
  {
    if (y && sscanf(arg, "~/%s",junk))
      arg = "/players/" + 
       (string)y->query_real_name() + "/" + junk;
    else if (sscanf(arg, "~%s/%s", junk, junk2) == 2)
      arg = "/players/"+junk+"/"+junk2;
    else if (sscanf(arg, "~%s", junk) == 1)
      arg = "/players/"+junk;
  }

  if (arg[0] != '/')
    arg = (y && (int)y->query_level() > 19) ? 
           (string)y->query_pwd() + arg :
           "/" + arg;

  if (text_contains(arg, ".."))
  {
    string b, c, *t;
    int x;

    x = 0; t = ({ });
    i = strlen(arg)-1;

    b = (arg[i]=='/') ? "/" : "";
    i = sizeof(args = explode(arg, "/"));
    while(i--)
    {
      if ((c=args[i]) == "..")
        x++;
      else if (x)
        x--;
      else
        t = ({ c }) + t;
    }
    arg = "/"+implode(t, "/")+b;
  }
  i = strlen(arg)-1;
  if (arg[i] != '/' && check_file(arg) == -2)
    arg += "/";
  return arg;
}

status is_vowel(mixed char)
{
    return((
      char=="a"||char=='a'||
      char=="e"||char=='e'||
      char=="i"||char=='i'||
      char=="o"||char=='o'||
      char=="u"||char=='u') ? 1 : 0);
}

string a_or_an(string phrase)
{
  phrase = delete_colour(phrase);
  return (is_vowel(phrase[0])?"an":"a");
}

varargs mixed expand_player(string input, int epType, int pFlag,
                            object optPob, int pFlag2)
{
  object *us, nm, eob;
  mixed  obj, nmr;
  string *heh;
  int    s;
  s = sizeof(us = users());
  heh = ({ });

  while(s--)
    if((nm = us[s]) && (nmr = (string)nm->query_real_name()) &&
       (nmr[0..strlen(input)-1] == input) &&
       (obj = efun::find_player(nmr)) && (!pFlag ||
       efun::present(obj, optPob) ||
       (pFlag2 && (eob=environment(optPob)) && 
       efun::present(obj,eob))))
         heh += ({ nmr });

  switch(s=sizeof(heh))
  {
    case 0: return (!epType ? input : 0);
    case 1: return (!epType ? nmr : efun::find_player(heh[0]));
    default:
      write("\
Try again.\n"+s+" \
players with a name beginning with \""+input+"\".\n\
You must specify which player you mean a little more clearly.\n");
      write("Possible targets found: ");
      while(s-- > 1)
        write(capitalize(heh[s])+", ");
      write(capitalize(heh[s])+".\n");
  }
}

/*
varargs object present(mixed str, mixed ob, status pFlag)
{
  object obj, pob;
  if(intp(ob) && ob != 0)
  {
    ob = 0;
    pFlag = 1;
  }
  if(!ob)
  {
    obj = efun::present(str, (pob = previous_object()));
    if(!obj && (obj=environment(pob)))
      obj = efun::present(str, obj);
  }
  else
    obj = efun::present(str, ob);
  if(!pFlag || obj || objectp(str))
    return obj;
  if(stringp(str) && this_player())
  {
    if(!ob)
      str = expand_player(str,0,1,(pob = previous_object()),1);
    else
      str = expand_player(str,0,1,ob);
  }
  if(!ob)
  {
    if(obj=efun::present(str, pob))
      return obj;
    else if(obj=environment(pob))
      return efun::present(str, obj);
  }
  else
    return efun::present(str, ob);
}
*/

varargs object present(mixed str, mixed ob)
{
  if(ob) return efun::present(str, ob);
  else return efun::present(str, previous_object());
}

varargs object find_player(string str, int fpType)
{
  object obj;
  if(obj = efun::find_player(str))
    return obj;
  else if(fpType && this_player())
    return expand_player(str, 1);
} 
