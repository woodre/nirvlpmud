int no_clean;
clean_up() {
   string a,b,fname;
   object thi_ob,env_ob;
   object obfile;
   /* if there is a custom_clean() run it. if custom clean returns positive
      don't go further, if not continue. -Bp */
   if(this_object()->custom_clean()) return 1;
   /* if using a custom clean as a replacement, set_no_clean should be used to 
      prevent regular clean_up from working, unless of course you
      want it that way. -Bp */
   if (no_clean) return 1;
   thi_ob = this_object();
   env_ob = environment(this_object());
/*
   if(thi_ob) {
   if(env_ob)
   log_file("CLEAN",ctime(time())+" "+file_name(thi_ob)+" clean CALLED environ:"+file_name(env_ob)+"\n");
   else
   log_file("CLEAN",ctime(time())+" "+file_name(thi_ob)+" clean CALLED NO ENVIRON\n");
  }
*/
   if(env_ob)
   if(extract(file_name(env_ob),0,19)=="players/boltar/hotel") return 1;
   if(env_ob)
   if (call_other(env_ob, "query_npc",0)){
      env_ob->clean_up();
      return 1;
   }
   if(env_ob)
   if (call_other(env_ob, "query_interactive",0))
      return 1;
   if(env_ob)
   if(environment(env_ob)) {
   if(environment(env_ob)->query_npc())
      return 1;
   if(environment(env_ob)->query_interactive())
      return 1;
   }
   if(thi_ob->query_npc())
      if(thi_ob->query_attacker()) return 1;
      dest_inv();
   fname=file_name(thi_ob);
   if(sscanf(fname, "%syers%s", a,b) == 2)
      {
      if(sscanf(fname, "%s#%s", a,b) == 2) {
         obfile=find_object("/"+a);
         if(obfile)
         destruct(obfile);
      }
   }
/*
   log_file("CLEAN",file_name(thi_ob)+"DESTRUCTED\n");
*/
   destruct(thi_ob);
   return 1;
}
dest_inv(){
   object obfile,list_no;
   int t,k;
   string fname,a,b;
   list_no = allocate(70);
   list_no = all_inventory(this_object());
   k = sizeof(list_no);
   t=0;
   while(t < k){
      /*
      destruct(list_no[t]);
      destruct(file_name(list_no[t]));
      */
      fname=file_name(list_no[t]);
      if(sscanf(fname, "%syers%s", a,b) == 2)
         {
         if(sscanf(fname, "%s#%s", a,b) == 2) {
            obfile=find_object("/"+a);
            destruct(obfile);
         }
         }
      destruct(list_no[t]);
      t += 1;
   }
   return 1;
}
set_no_clean(arg){
   no_clean=arg;
}
