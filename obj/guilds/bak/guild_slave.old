/*
 * Guild Slave
 *  by Vertebraker@Nirvana
 *
 * Started: 5-12-04
 * Finished: ???
 *
 * Description:
 *  This object is primarily for usage in the "guild renewal" project
 *  that is being undertaken by Vertebraker. It contains short and easy
 *  ways of automating guild actions, functions, and so forth that are
 *  generally mudwide. The way that it is coded is the way that Vertebraker
 *  coded these rudiments, but not necessarily the "best" way to do
 *  so. Learn all you want from it... but if you steal it liberally, at
 *  least inherit it for Pete's sake.
 */


inherit "/obj/guilds/lib/slaveData";

#include "guild_defs.h"


void reset(int arg)
{
  ::reset(arg);
  if(!root() && !arg)
  {
    if(saved_vars || vars) return;
    saved_vars = ({ });
    vars = ([ ]);
  }
}

void init()
{
  string *cmds;
  int    s;

  if(!owner)
    return;

  MASTER->load_me();
  MASTER->register_slave(me);

  s = (int)MASTER->cmd_size();
  cmds = (string*)MASTER->get_cmds();

  while(s--)
    add_action("slave_hook", cmds[s]);
}

status drop() { return 1; }
status get()  { return 1; }  /* for Cloning ... */ 

void save_me(string path)
{
  saved_vars = deconstruct_mapping(vars);
  save_object(path + (string)owner->QRN);
  saved_vars = 0;
}

status restore_me(string path)
{
  status result;

  result = restore_object(path + (string)owner->QRN);
  vars = reconstruct_mapping(saved_vars);

  saved_vars = 0;
  return result;
}

void remove_object()
{
  MASTER->deregister_slave(me);
  save_me(MAINSAVE);
}

int slave_hook(string arg)
{
  string verb;

  return (int)call_other(CMDDIR + "_" + (verb=query_verb()),
              "cmd_"+verb, arg);
}

status id(string arg)
{
  return (arg == "guild_object" || arg == GUILDNAME + "_object" 
       || arg == "guild_slave");
}

string query_auto_load()
{
  return (OBJPATH+":");
}

status query_prevent_shadow() { return 1; }

