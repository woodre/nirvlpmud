 string capt_name, possess;
#define V this_player()->query_name()
soul_init() {
  capt_name = call_other(this_player(), "query_name", 0);
/*
  add_action("applaud"); add_verb("applaud");
  add_action("blush"); add_verb("blush");
  add_action("bounce"); add_verb("bounce");
  add_action("bow"); add_verb("bow");
  add_action("smack","smack",3);
  add_action("burp"); add_verb("burp");
  add_action("chuckle"); add_verb("chuckle");
  add_action("clap"); add_verb("clap");
*/
  add_action("comfort"); add_verb("comfort");
  add_action("cough"); add_verb("cough");
  add_action("cry"); add_verb("cry");
  add_action("cuddle"); add_verb("cuddle");
  add_action("flip"); add_verb("flip");
  add_action("fondle"); add_verb("fondle");
  add_action("french"); add_verb("french");
  add_action("frown"); add_verb("frown");
  add_action("gasp"); add_verb("gasp");
  add_action("giggle"); add_verb("giggle");
  add_action("glare"); add_verb("glare");
  add_action("grin"); add_verb("grin");
  add_action("groan"); add_verb("groan");
  add_action("grope"); add_verb("grope");
  add_action("growl"); add_verb("growl");
  add_action("hiccup"); add_verb("hiccup");
  add_action("hug"); add_verb("hug");
  add_action("kick"); add_verb("kick");
  add_action("kiss"); add_verb("kiss");
  add_action("laugh"); add_verb("laugh");
  add_action("lick"); add_verb("lick");
  add_action("love"); add_verb("love");
  add_action("moan"); add_verb("moan");
  add_action("nibble"); add_verb("nibble");
  add_action("nod"); add_verb("nod");
  add_action("poke"); add_verb("poke");
  add_action("pout"); add_verb("pout");
  add_action("purr"); add_verb("purr");
  add_action("ruffle"); add_verb("ruffle");
  add_action("scream"); add_verb("scream");
  add_action("shiver"); add_verb("shiver");
  add_action("shrug"); add_verb("shrug");
  add_action("sigh"); add_verb("sigh");
  add_action("sing"); add_verb("sing");
  add_action("slap"); add_verb("slap");
  add_action("smirk"); add_verb("smirk");
  add_action("smile"); add_verb("smile");
  add_action("snap"); add_verb("snap");
  add_action("sneeze"); add_verb("sneeze");
  add_action("snicker"); add_verb("snicker");
  add_action("sniff"); add_verb("sniff");
  add_action("snore"); add_verb("snore");
  add_action("snuggle"); add_verb("snuggle");
  add_action("spit"); add_verb("spit");
  add_action("squeeze"); add_verb("squeeze");
  add_action("stare"); add_verb("stare");
  add_action("strut"); add_verb("strut");
  add_action("sulk"); add_verb("sulk");
  add_action("twiddle"); add_verb("twiddle");
  add_action("whistle"); add_verb("whistle");
  add_action("wiggle"); add_verb("wiggle");
  add_action("wink"); add_verb("wink");
  add_action("yawn"); add_verb("yawn");
  add_action("beg"); add_verb("beg");
  add_action("bleed", "bleed");
  add_action("cringe", "cringe");
  add_action("curtsey", "curtsey");
  add_action("dance", "dance");
  add_action("fume", "fume");
  add_action("daydream", "daydream");
  add_action("fart", "fart");
  add_action("flash", "flash");
  add_action("flirt", "flirt");
  add_action("grovel", "grovel");
  add_action("grumble", "grumble");
  add_action("hold", "hold");
  add_action("hop", "hop");
  add_action("nudge", "nudge");
  add_action("pat", "pat");
  add_action("pinch", "pinch");
  add_action("peer", "peer");
  add_action("point", "point");
  add_action("ponder", "ponder");
  add_action("puke", "puke");
  add_action("punch", "punch");
  add_action("snarl","snarl");
  add_action("spank", "spank");
  add_action("steam", "steam");
  add_action("tackle", "tackle");
  add_action("thank", "thank");
  add_action("taunt", "taunt");
  add_action("tickle", "tickle");
  add_action("wave", "wave");
  add_action("worship", "worship");
  add_action("yodel", "yodel");
    if (call_other(this_player(), "query_level",0) > 19) {
  add_action("emote"); add_verb("emote");
  add_action("emote"); add_xverb(":");
  }
   /* OBJECT ENHANCER add_actions static/hawkeye */
{
  add_action("help2", "help2");

  add_action("ack",       "ack");
  add_action("agree",     "agree");
  add_action("be",        "be");
  add_action("blink",     "blink");
  add_action("cackle",    "cackle");
  add_action("exclaim",   "exclaim");
  add_action("goose",     "goose");
  add_action("high_five", "high5");
  add_action("hmm",       "hmm");
  add_action("innocent",  "innocent");
  add_action("melt",      "melt");
  add_action("okay",      "ok");
add_action("scratchhead", "scratchhead");
  add_action("shake",     "shake");
  add_action("think",     "think");
  add_action("thwap",     "thwap");
  add_action("who2",      "who2");
  add_action("noogie",   "noogie");
  add_action("headlock", "headlock");
  add_action("jab", "jab");
  add_action("sucker", "sucker");
  add_action("snort", "snort");
  add_action("flipoff", "flipoff");
  add_action("blah", "blah");
    add_action("moon", "moon");

}
}

emote(str){
  if(ghost())
    return 0;
  if(!str)
    return 0;
 str = format(str,60);
  write("You "+str+"\n");
  say(call_other(this_player(), "query_name", 0) + " "+ str +"\n");
  return 1;
}

applaud() {
  if (ghost())
    return 0;
  write("You applaud wholeheartedly.\n");
  say(call_other(this_player(), "query_name", 0) + " gives a round of applause.\n");
  return 1;
}

blush() {
  if (ghost())
    return 0;
  write("Your cheeks are burning.\n");
  say(call_other(this_player(), "query_name", 0) + " blushes.\n");
  return 1;
}

bounce() {
  if (ghost())
    return 0;
  write("B O I N G !!\n");
  say(call_other(this_player(), "query_name", 0) + " bounces around.\n");
  return 1;
}

bow(str) {
  object who;
  if (ghost())
    return 0;
  if (!str) {
    write("You bow to your audience.\n");
    say(call_other(this_player(), "query_name", 0) + " bows gracefully.\n");
    return 1;
  }
  who = present(lower_case(str), environment(this_player()));
  if (!who || !living(who) || who == this_player())
    return 0;
  tell_object(who, call_other(this_player(), "query_name", 0) + " bows before you.\n");
  write("You bow to " + str +".\n");
  say(call_other(this_player(), "query_name", 0) + " bows to " + str + ".\n", who);
  return 1;
}

burp() {
  if (ghost())
    return 0;
  write("Excuse yourself!\n");
  say(call_other(this_player(), "query_name", 0) + " burps rudely.\n");
  return 1;
}

cackle() {
  if (ghost())
    return 0;
  write("You cackle gleefully.\n");
  say(call_other(this_player(), "query_name", 0) + " throws the head back and cackles with glee!.\n");
  return 1;
}

chuckle() {
  if (ghost())
    return 0;
  write("You chuckle politely.\n");
  say(call_other(this_player(), "query_name", 0) + " chuckles politely.\n");
  return 1;
}

clap() {
  if (ghost())
	return 0;
    write("You clap briefly.\n");
    say(call_other(this_player(), "query_name", 0) + " claps.\n");
    return 1;
}

comfort(str) {
    object who;
    if (ghost())
	return 0;
    if (!str)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " comforts you.\n");
    write("You comfort " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " comforts " + str + ".\n", who);
    return 1;
}

cough() {
    if (ghost())
	return 0;
    write("Cover your mouth when you do that!\n");
    say(call_other(this_player(), "query_name", 0) + " coughs noisily.\n");
    return 1;
}

cry() {
    if (ghost())
	return 0;
    write("Waaaaah!\n");
    say(call_other(this_player(), "query_name", 0) + " bursts into tears.\n");
    return 1;
}

cuddle(str) {
    object who;
    if (ghost())
	return 0;
    if (!str)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " cuddles you.\n");
    write("You cuddle " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " cuddles " + str + ".\n", who);
    return 1;
}

curtsey() {
    if (ghost())
	return 0;
    write("You curtsey gracefully.\n");
    say(call_other(this_player(), "query_name", 0) + " curtseys gracefully.\n");
    return 1;
}

dance(str) {
    object who;
    if (ghost())
	return 0;
    if (!str) {
        write("Feels silly, doesn't it?\n");
	say(call_other(this_player(), "query_name", 0) + " does the disco duck.\n");
	return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " sweeps you across the dance floor.\n");
    write("You sweep " + str +" across the dance floor.\n");
    say(call_other(this_player(), "query_name", 0) + " sweeps " + str + " across the dance floor.\n", who);
    return 1;
}

fart(str) {
    object who;
    if (ghost())
	return 0;
if (!str) {
    write("How rude!\n");
    say(call_other(this_player(), "query_name", 0) + " lets off a real rip-roarer.\n");
    return 1;
}
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " farts in your general direction.\n");
    write("You fart in " + str + "'s general direction.\n");
    say(call_other(this_player(), "query_name", 0) + " farts in the general direction of " + str + ".\n", who);
    return 1;
}

flip() {
    if (ghost())
	return 0;
    write("You flip head over heels.\n");
    say(call_other(this_player(), "query_name", 0) + " flips head over heels.\n");
    return 1;
}

fondle(str) {
    object who;
    if (ghost())
	return 0;
    if (!str)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " fondles you.\n");
    write("You fondle " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " fondles " + str + ".\n", who);
    return 1;
}

french(str) {
    object who;
    if (ghost())
	return 0;
    if (!str)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) +
       " gives you a deep and passionate kiss..it seems to take forever...\n");
    write("You give " + str + " a REAL kiss..it lasts a long time...\n");
    say(call_other(this_player(), "query_name", 0) + " gives " + str +
       " a deep and passionate kiss..it seems to take forever...\n", who);
    return 1;
}

frown() {
    if (ghost())
	return 0;
    write("Is something wrong?\n");
    say(call_other(this_player(), "query_name", 0) + " frowns.\n");
    return 1;
}

gasp() {
    if (ghost())
	return 0;
    write("You gasp in astonishment.\n");
    say(call_other(this_player(), "query_name", 0) + " gasps in astonishment!\n");
    return 1;
}

giggle() {
    if (ghost())
	return 0;
    write("You giggle inanely.\n");
    say(call_other(this_player(), "query_name", 0) + " giggles inanely.\n");
    return 1;
}

glare(str) {
    object who;
    if (ghost())
	return 0;
    if (!str)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " glares at you.\n");
    write("You glare stonily at " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " glares at " + str + ".\n", who);
    return 1;
}

grin() {
    if (ghost())
	return 0;
    write("You grin evilly.\n");
    say(call_other(this_player(), "query_name", 0) + " grins evilly.\n");
    return 1;
}

groan() {
    if (ghost())
	return 0;
    write("You groan.\n");
    say(call_other(this_player(), "query_name", 0) + " groans loudly.\n");
    return 1;
}

grope(str) {
    object who;
    if (ghost())
	return 0;
    if (!str)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " gropes you.\n");
    write("<Well what sort of noise do you expect here?>.\n");
    say(call_other(this_player(), "query_name", 0) + " gropes " + str + ".\n", who);
    return 1;
}

growl(str) {
    object who;
    if (ghost())
	return 0;
    if (!str) {
        write("You growl.\n");
	say(call_other(this_player(), "query_name", 0) + " growls.\n");
	return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " growls at you.\n");
    write("You growl at " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " growls at " + str + ".\n", who);
    return 1;
}

hiccup() {
    if (ghost())
	return 0;
    write("Hic!\n");
    say(call_other(this_player(), "query_name", 0) + " hiccups.\n");
    return 1;
}

hug(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " hugs you.\n");
    write("You hug " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " hugs " + str + ".\n", who);
    return 1;
}

kick(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " kicks you.   OUCH!!\n");
    say(call_other(this_player(), "query_name", 0) + " kicks " + str + ".\n", who);
    write("You kick " + str + ".\n");
    return 1;
}

kiss(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " kisses you.\n");
    say(call_other(this_player(), "query_name", 0) + " kisses " + str + ".\n", who);
    if (call_other(who, "query_frog")) {
	call_other(this_player(), "frog_curse", 1);
	call_other(who, "frog_curse", 0);
	return 1;
    }
    write("You kiss " + str + ".\n");
    return 1;
}

laugh() {
    if (ghost())
	return 0;
    write("You fall down laughing.\n");
    say(call_other(this_player(), "query_name", 0) + " falls down laughing.\n");
    return 1;
}

lick(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " licks you.\n");
    say(call_other(this_player(), "query_name", 0) + " licks " + str + ".\n", who);
    write("You lick " + str + ".\n");
    return 1;
}

love(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " whispers to you sweet words of love.\n");
    say(call_other(this_player(), "query_name", 0) + " whispers softly to " + str + ".\n", who);
    write("You tell your true feelings to " + str + ".\n");
    return 1;
}

moan() {
    if (ghost())
	return 0;
    write("You start to moan.\n");
    say(call_other(this_player(), "query_name", 0) + " starts moaning.\n");
    return 1;
}

nibble(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " nibbles on your ear.\n");
    say(call_other(this_player(), "query_name", 0) + " nibbles on " + str + "s ear.\n", who);
    write("You nibble " + str + "s ear.\n");
    return 1;
}

nod() {
    if (ghost())
	return 0;
    write("You nod solemnly.\n");
    say(call_other(this_player(), "query_name", 0) + " nods solemnly.\n");
    return 1;
}

poke(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " pokes you in the ribs.\n");
    say(call_other(this_player(), "query_name", 0) + " pokes " + str + " in the ribs.\n", who);
    write("You poke " + str + " in the ribs.\n");
    return 1;
}
 
pat(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " pats you on the head.\n");
    say(call_other(this_player(), "query_name", 0) + " pats " + str + " on the head.\n", who);
    write("You pat " + str + " on the head.\n");
    return 1;
}

pout() {
    if (ghost())
	return 0;
    write("Ah, don't take it so hard.\n");
    say(call_other(this_player(), "query_name", 0) + " pouts.\n");
    return 1;
}

puke(str) {
    object who;
    if (ghost())
	return 0;
    if(!str) {
        write("You puke on your shoes.\n");
        say(call_other(this_player(), "query_name", 0) + " doubles over and pukes.\n");
        return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " pukes all over you!\n");
    write("You puke on " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " pukes on " + str + ".\n", who);
    return 1;
}

purr() {
    if (ghost())
	return 0;
    write("MMMMEEEEEEEEOOOOOOOWWWWWWW!\n");
    say(call_other(this_player(), "query_name", 0) + " purrs contentedly.\n");
    return 1;
}

ruffle(str) {
    object who;
    if (ghost())
	return 0;
    if (!str)
	return 0;
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " ruffles your hair playfully.\n");
    write("You ruffle " + str + "s hair playfully.\n");
    say(call_other(this_player(), "query_name", 0) + " ruffles " + str + "s hair playfully.\n", who);
    return 1;
}

scream() {
    if (ghost())
	return 0;
    write("ARRGGGGGGHHHHHH!!!!\n");
    say(call_other(this_player(), "query_name", 0) + " screams loudly!\n");
    return 1;
}

/*
shake(str) {
    object who;
    if (ghost())
	return 0;
    if(!str) {
        write("You're shaking in your boots.\n");
        say(call_other(this_player(), "query_name", 0) + " shakes and quivers like a bowlful of jelly.\n");
        return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " shakes your hand.\n");
    write("You shake hands with " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " shakes " + str + "s hand.\n", who);
    return 1;
}
*/

shiver() {
    if (ghost())
	return 0;
    write("Brrrrrr!!!.\n");
    say(call_other(this_player(), "query_name", 0) + " shivers from the cold.\n");
    return 1;
}

shrug() {
    if (ghost())
	return 0;
    write("You shrug.\n");
    say(call_other(this_player(), "query_name", 0) + " shrugs helplessly.\n");
    return 1;
}

sigh() {
    if (ghost())
	return 0;
    write("You sigh.\n");
    say(call_other(this_player(), "query_name", 0) + " sighs deeply.\n");
    return 1;
}

sing() {
    if (ghost())
	return 0;
    write("Oh sole mio!\n");
    say(call_other(this_player(), "query_name", 0) + " sings in Italian.\n");
    return 1;
}

slap(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    write("You slap " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " slaps " + str + ".\n", who);
    tell_object(who, call_other(this_player(), "query_name", 0) + " slaps you!\n");
    return 1;
}

smirk() {
    if (ghost())
	return 0;
    write("You smirk.\n");
    say(call_other(this_player(), "query_name", 0) + " smirks.\n");
    return 1;
}

smile(str) {
    object who;
    if (ghost()) {
	write("You smile inwardly.\n");
	return 1;
    }
    if(!str) {
        write("You smile happily.\n");
        say(call_other(this_player(), "query_name", 0) + " smiles happily.\n");
        return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " smiles at you.\n");
    write("You smile at " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " smiles at " + str + ".\n", who);
    return 1;
}

snap() {
    if (ghost())
	return 0;
    write("You snap your fingers.\n");
    say(call_other(this_player(), "query_name", 0) + " snaps with the fingers.\n");
    return 1;
}

sneeze() {
    if (ghost())
	return 0;
    write("Gazundheit!\n");
    say(call_other(this_player(), "query_name", 0) + " sneezes.\n");
    return 1;
}

snicker() {
    if (ghost())
	return 0;
    write("You snicker.\n");
    say(call_other(this_player(), "query_name", 0) + " snickers.\n");
    return 1;
}

sniff() {
    if (ghost())
	return 0;
    write("You sniff.\n");
    say(call_other(this_player(), "query_name", 0) + " sniffs.\n");
    return 1;
}

snore() {
    if (ghost())
	return 0;
    write("Zzzzzzzzzz...\n");
    say(call_other(this_player(), "query_name", 0) + " snores loudly.\n");
    return 1;
}

snuggle(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    write("You snuggle " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " snuggles up to " + str + ".\n", who);
    tell_object(who, call_other(this_player(), "query_name", 0) + " snuggles up to you.\n");
    return 1;
}

spit(str) {
    object who;
    if (ghost())
	return 0;
    if(!str) {
        write("You spit.\n");
        say(call_other(this_player(), "query_name", 0) + " spits on the ground.\n");
        return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " spits on you!.\n");
    write("You spit on " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " spits on " + str + ".\n", who);
    return 1;
}

squeeze(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    write("You squeeze " + str + " fondly.\n");
    say(call_other(this_player(), "query_name", 0) + " squeezes " + str + " fondly.\n", who);
    tell_object(who, call_other(this_player(), "query_name", 0) + " squeezes you fondly.\n");
    return 1;
}

stare(str) {
    object who;
    if (ghost())
	return 0;
    if(!str) {
        write("You stare into space.\n");
        say(call_other(this_player(), "query_name", 0) + " stares into space.\n");
        return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " stares deep into your eyes.\n");
    write("You stare dreamily at " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " stares dreamily at " + str + ".\n", who);
    return 1;
}

strut() {
    if (ghost())
	return 0;
    write("Strut your stuff!\n");
    say(call_other(this_player(), "query_name", 0) + " struts proudly.\n");
    return 1;
}

sulk() {
    if (ghost())
	return 0;
    write("You sulk.\n");
    say(call_other(this_player(), "query_name", 0) + " sulks in the corner.\n");
    return 1;
}

thank(str) {
    object who;
    if (ghost())
	return 0;
    if (str == 0)
	return 0;
    who = present(str, environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    write("You thank " + str + ".\n");
    say(call_other(this_player(), "query_name", 0) + " thanks " + str + ".\n", who);
    tell_object(who, call_other(this_player(), "query_name", 0) + " thanks you.\n");
    return 1;
}

twiddle() {
    if (ghost())
	return 0;
    write("You twiddle your thumbs.\n");
    say(call_other(this_player(), "query_name", 0) + " twiddles the thumbs.\n");
    return 1;
}

whistle(str) {
    object who;
    if (ghost())
	return 0;
    if(!str) {
        write("You whistle appreciatively.\n");
        say(call_other(this_player(), "query_name", 0) + " whistles appreciatively.\n");
        return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " whistles appreciatively at you.\n");
    write("You whistle appreciatively at " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " whistles appreciatively at " + str + ".\n", who);
    return 1;
}

wiggle() {
    if (ghost())
	return 0;
    write("You wiggle your bottom.\n");
    say(call_other(this_player(), "query_name", 0) + " wiggles the bottom.\n");
    return 1;
}

wink(str) {
    object who;
    if (ghost())
	return 0;
    if(!str) {
        write("You wink.\n");
        say(call_other(this_player(), "query_name", 0) + " winks suggestively.\n");
        return 1;
    }
    who = present(lower_case(str), environment(this_player()));
    if (!who || !living(who) || who == this_player())
	return 0;
    tell_object(who, call_other(this_player(), "query_name", 0) + " winks suggestively at you.\n");
    write("You wink at " + str +".\n");
    say(call_other(this_player(), "query_name", 0) + " winks suggestively at " + str + ".\n", who);
    return 1;
}

yawn() {
    if (ghost())
	return 0;
    write("My, what big teeth you have!\n");
    say(call_other(this_player(), "query_name", 0) + " yawns.\n");
    return 1;
}

 
posessive() {

    if (call_other(this_player(), "query_gender") == "male") 
       return "his";
    if (call_other(this_player(), "query_gender") == "female")
       return "her";
    return "its";
}

static general(self, others) {
    if (ghost())
        return 0;
    write(self + "\n");
    capt_name = call_other(this_player(), "query_name");
    say(capt_name + " " + others + "\n");
    return 1;
}
 
static specific(self, others, who, target) {
    if (ghost())
        return 0;
    who = present(lower_case(who), environment(this_player()));
    if (!who || !living(who) || who == this_player())
        return 0;
    write(self + "\n");
    capt_name = call_other(this_player(), "query_name");
    tell_object(who, capt_name + " " + target + "\n");
    say(capt_name + " " + others + "\n", who);
    return 1;
}
 
beg() {
    return general("You beg like a dog.", "begs like a dog.");
}
 
bleed() {
    if (call_other(this_player(), "query_hp") ==
        call_other(this_player(), "query_max_hp"))
        return 0;
    return general("You bleed.", "bleeds.");
}
 
cringe() {
    return general("You cringe in terror.", "cringes in terror.");
}
 
 
 
daydream() {
    return general("You dream of better days.", "gets lost in a daydream.");
}
 
 
flash(str) {
    if (!str)
        return general("BOOOO!!!!!", "presents "+posessive()+" body to the room.");
    str = capitalize(str);
    return specific("You make desperate attempt to impress "+str+" with your body.",
                    "flashes "+str+".", str, "shows you "+posessive()+" naked body.");
}
flirt(str) {
    if (!str)
        return general("You flirt with everyone and they perceive you are easy.",
                       "flirts with the entire room.");
    str = capitalize(str);
    return specific("You start flirting with "+str+".", "flirts with "+str+".",
                    str, "seems to be making advances toward you.");
}
 
fume() {
    return general("You'll get over it.", "fumes.");
}
 
grovel(str) {
    if (!str)
        return general("You grovel shamelessly.", "grovels shamelessly.");
    str = capitalize(str);
    return specific("You grovel before " + str + ".",
                    "grovels before " + str + ".", str, "grovels before you.");
}
grumble() {
    return general("You grumble.", "grumbles.");
}
 
 
hold(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You hold " + str + ".", "holds " + str + ".",
                    str, "holds you.");
}
 
hop() {
    if (!call_other(this_player(), "query_frog"))
        return 0;
    return general("You hop like the frog you are.", "hops around.");
}
 
nudge(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You nudge " + str + ".", "nudges " + str + ".",
                    str, "nudges you.");
}
 
 
peer(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You peer at " + str + " quizzically.",
                    "peers at " + str + " quizzically.",
                    str, "peers at you quizically.");
}
 
pinch(str) {
     if (!str)
         possess = posessive();
         return general("You pinch yourself and find that you are indeed awake.",
                         "pinches "+possess +" belly.");
         str = capitalize(str);
         return specific("You pinch "+str+".", "pinches "+str+" on the rear.",
                         "pinches your bottom.");
}
 
point(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You point at " + str + ".", "points at " + str + ".",
                    str, "points at you.");
}
 
ponder() {
    return general("You ponder the situation.", "ponders the situation.");
}
 
 
 
punch(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You punch " + str + ".", "punches " + str + ".",
                    str, "punches you!");
}
 
smack(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You smack " + str + " across the face.", "smacks " + str + ".", str, "smacks you across the face!");
}
snarl(str) {
    if (!str)
        return general("You snarl angrily.", "snarls angrily.");
    str = capitalize(str);
    return specific("You snarl angrily at " + str + ".",
                    "snarls angrily at " + str + ".",
                    str, "snarls angrily at you.");
}
 
spank(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You spank " + str + ".", "spanks " + str + ".",
                    str, "spanks you!");
}
 
steam() {
    return general("You steam in silence.", "steams in silence.");
}
 
tackle(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You tackle " + str + " to the ground.",
                    "tackles " + str + " to the ground.", str, "tackles you!");
}
 
taunt(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You taunt " + str + ".", "taunts " + str + ".",
                    str, "taunts you.");
}
 
/*
thank(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You thank " + str + ".", "thanks " + str + ".",
                    str, "thanks you.");
}
*/
 
/*
think() {
    return general("You think carefully.", "thinks carefully.");
}
*/
 
tickle(str) {
    if (!str)
       return 0;
    str = capitalize(str);
    return specific("You tickle "+str+".", "visciously tickles "+str+".",
                     str, "tickles you fiendishly.");
}
 
wave(str) {
    if (!str)
        return general("You wave.", "waves.");
    str = capitalize(str);
    return specific("You wave at " + str + ".", "waves at " + str + ".",
                    str, "waves at you.");
}
 
worship(str) {
    if (!str)
        return 0;
    str = capitalize(str);
    return specific("You worship at " + str + "'s feet.",
                    "worships at " + str + "'s feet.",
                    str, "worships at your feet.");
}
 
 
yodel() {
    return general("You yodel a merry tune.", "yodels a merry tune.");
}
/*   OBJECT ENHANCER COMMANDS  from static/hawkeye   */

gender_pos() {

string gender, genpos;
object plyr;

plyr = this_player();

gender = plyr->query_gender_string();

if (gender == "female")
  genpos = "her";

if (gender == "male")
  genpos = "his";

if (gender == "creature")
  genpos = "its";

return genpos;
}

help2()
{
  cat("/players/static/obj/enhance_help");
  return 1;
}

who2() {
string name, spaces, where;
int count, i, t, amt, invis, lvl;

object list, scratch;
list = users();
count = 1;
write("\n"+
"     Name            Location\n"+
"<----------------------------------------------------------------------->\n");
for (i<0; i<sizeof(users()); i++) {
  name = list[i]->query_name();
  invis = list [i]->query_invis();
  lvl = list[i]->query_level();
  scratch = environment(list[i]);
  if(scratch && invis < 1 && lvl < 10001) {
    where = call_other(scratch, "short");
  amt = (15 - strlen(name));
  spaces = " ";
  for(t=0; t<amt; t++) {
    spaces = spaces + " ";
    }
  name = name + spaces;
if (count < 10)
   write("  "+count+": " + name + where + "\n");
else
   write (" "+count+": "+name+where+"\n");
count += 1;
        }
  }
write(
"<----------------------------------------------------------------------->\n");
  return 1;
}

ack() {
  say(this_player()->query_name()+" acks.\n");
  write("You ack.\n");
  return 1;
}

agree() {
  say(this_player()->query_name()+" nods in agreement.\n");
  write("You nod in agreement.\n");
  return 1;
}

be(str) {

  if(!str) {
    write("Be what?\n");
    return 1;
    }
  say(this_player()->query_name()+" appears to be "+str+".\n");
  write("You appear to be "+str+".\n");
  return 1;
}

blink() {

  say(V+" blinks.\n");
  write("You blink.\n");

  return 1;
}

/*
cackle() {

  say(V+" throws back "+gender_pos()+
      " head and cackles with glee!\n");
  write("You cackle gleefully.\n");
  return 1;
}
*/

exclaim(str)
{
  if(!str) {
    write("Exclaim what?\n");
    return 1;
    }

    write("You exclaim: " + str + "\n");
    say(V + " exclaims: " + str + "\n");
    return 1;
}

goose(str)
{
  object friend;
  if(!str) {
    write("Goose who?\n");
    return 1;
    }
  friend = present(lower_case(str), environment(this_player()));
  if (!friend || !living(friend) || friend == this_player())
    return 0;
  write("You goose "+str+"!\n");
  tell_object(friend, this_player()->query_name()+" sneaks up "+
    "behind you and gooses you!\n");
  say(this_player()->query_name()+" sneaks up and gooses "+str+"!\n",
    friend);
  return 1;
}

high_five(str)
{
  object friend;
  if(!str) return 0;
  friend = present(lower_case(str), environment(this_player()));
  if (!friend || !living(friend) || friend == this_player())
    return 0;
  write("You run up and slap "+capitalize(str)+" a high-five!\n");
tell_object(friend, this_player()->query_name()+" runs up to you "+
  "and slaps you a high-five!\n");
  say(this_player()->query_name()+" slaps "+capitalize(str)+
  " a high-five!\n", friend);
  return 1;
}

hmm()
{
  say(V + " says: hmm...\n");
  write("You say: hmm...\n");
  return 1;
}

innocent()
 {
  say(this_player()->query_name()+" whistles innocently.\n");
  write("You whistle innocently.\n");
  return 1;
}

melt(str)
{
  object friend;
  if(!str){
    say(this_player()->query_name()+" melts.\n");
    write("You melt.\n");
    return 1;
    }
  friend = present(lower_case(str), environment(this_player()));
  if (!friend || !living(friend) || friend == this_player())
    return 0;
  say(this_player()->query_name()+" melts in "+capitalize(str)+
    "'s arms.\n", friend);
  write("You melt in "+capitalize(str)+"'s arms.\n");
  tell_object(friend, this_player()->query_name()+" melts in your "+
    "arms.\n");
  return 1;
}

okay() {

  say(V + " says: okay\n");
  write("You say: okay\n");
  return 1;
}

scratchhead() {

write("You scratch your head.\n");
say(this_player()->query_name()+" scratches "+gender_pos()+
 " head.\n");
return 1;
}

shake(str) {

object who;

if (!str) {
  write("You shake your head.\n");
  say(this_player()->query_name()+" shakes "+gender_pos()+
  " head.\n");
  return 1;
  }

if (str == lower_case(V)) return 0;
who = present(str, environment(this_player()));
if (!who) return 0;

write("You shake hands with "+str+".\n");
say(V + " shakes hands with " + str + ".\n", who);
tell_object(who, V + " shakes your hand.\n");
return 1;
}

think(str)
{
if (!str) {
   write("You think carefully.\n");
     say(V+ " thinks carefully.\n");
   return 1;
}

   write("You think "+str+".\n");
     say(V+ " thinks "+str+".\n");
   return 1;
}

thwap(str)
{
object victim;
if (!str) return 0;
victim = present(str, environment(this_player()));
if (!victim) return 0;

write("You thwap "+str+".\n");
say(V + " thwaps "+str+".\n", victim);
tell_object(victim, V + " thwaps you.\n");
return 1;
}
  noogie(str) {
  object victim;
  if(!str) return 0;
   victim = present(str, environment(this_player()));
  if(!victim) return 0;
   write("You grab "+str+" and give 'em a noogie.\n");
  say(V + " gives "+str+" a noogie.\n");
tell_object(victim, V + " gave you a noogie.\n");
 return 1;
}
headlock(str) {
  object victim;
  if(!str) return 0;
  victim = present(str, environment(this_player()));
  if(!victim) return 0;
write("You put "+str+" in a head lock.\n");
  say(V + " puts "+str+" in a headlock.\n");
  tell_object(victim, V +" put you in a headlock.\n");
  return 1;
}
moon(str) {
  object victim;
  if(!str) return 0;
  victim = present(str, environment(this_player()));
if(!victim) return 0;
  write("You pull down your pants and moon " + str+ " \n");
  say(V + " pulls down " + gender_pos()+" pants and moons " + str+ "\n");
 tell_object(victim, V + " just mooned you.\n");
return 1;
}
jab(str) {
  object victim;
  if(!str) return 0;
  victim = present(str, environment(this_player()));
  if(!victim) return 0;
  write("You reach out with two fingers and jab "+str+" in the eyes.\n");
  say(V + " reaches out with two fingers and jabs "+str+" in the eyes.\n");

  tell_object(victim, V +" just jabbed you in the eyes.\n");
return 1;
}
sucker(str) {
  object victim;
 if(!str) return 0;
victim = present(str, environment(this_player()));
  if(!victim) return 0;
  write("Pointing to the sky, you get "+str+" to look up and you sucker punch 'em in the stomach.\n");
  say(V + " points to the sky and as "+str+" looks up, "+V+" sucker punches 'em.\n");
   tell_object(victim, V +" just sucker punched you!\n");
  return 1;
}
  blah() {
  say(V + " says: Blah!!\n");
   write("You say: Blah!!\n");
  return 1;
}
    flipoff(str) {
  object victim;
 if (!str) return 0;
  victim = present(str, environment(this_player()));
  if(!victim) return 0;
  write("You extend your middle finger and flip off "+str+".\n");
  say(V + " extends " + gender_pos()+ " middle finger towards " + str+" and says Screw YOU!\n");
   tell_object(victim, V +" just gave you the byrd!\n");
  return 1;
}
snort() {
say(V + " snorts loudly!\n");
   write("You snort loudly.\n");
  return 1;
}
