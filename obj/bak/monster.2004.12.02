/*
 * A general purpose monster. Clone this object,
 * and call local functions to configure it.
 */
#include "living.h"
#include "clean.c"
#include "chat_include.c"
#include "catch_talk_include.c"

#define EMOTER(a,b) (string)call_other("/bin/std","x",a,b)
#define ANSI(x) (string)call_other("/obj/monitor","replace_ansi",x)
#define NONPHYS 30000/20000


/*
 * The heart beat is always started in living.h when we are attacked.
 */

string short_desc, long_desc, alias, alt_name, race, hbflag,info;
int move_at_reset, aggressive, can_kill;
object kill_ob;
string *message_hit;
object desc_ob;


int heal_start;
int heal_rate;
int heal_intv;
int chat_chance;
int chat_nr;

int a_chat_chance;
int a_chat_nr;

string the_text;
int have_text;


object dead_ob;
object init_ob;

int random_pick;

int spell_chance, spell_dam_mon;
string spell_mess1, spell_mess2;
object me;
static int give_count;

string spell_type;

static int res, pac, pwc;

static string armor_special, weapon_special;

mixed *armor_params;
mixed *weapon_params;

mixed *spells;
status multi_cast;


set_desc_ob(ob) { desc_ob = ob; }

valid_attack(ob)
{
    /* Don't attack other monsters unless specifically allowed to. */
    return (!call_other(ob, "query_npc", 0) || can_kill);
}

reset(arg)
{
    if (arg) {
	if (move_at_reset)
	    random_move();
	return;
    }
    is_npc = 1;
    /* Only let this monster kill other monsters if specifically allowed. */
    can_kill = 0;
    enable_commands();
    me = this_object();
    message_hit=({"massacre"," to small fragments","smashed"," with a bone crushing sound","hit"," very hard","hit"," hard","hit","","grazed","","tickled"," in the stomach"});
}

random_move()
{
    int n;
    n = random(4);
    if (n == 0)
	command("west");
    else if (n == 1)
	command("east");
    else if (n == 2)
	command("south");
    else if (n == 3)
	command("north");
}

short() {
    if (desc_ob) return call_other(desc_ob,"monster_short",0);
    return short_desc;
}

/*
long() {
    if (desc_ob) {
        call_other(desc_ob,"monster_long",0);
	return;
    }
    write (long_desc);
}
*/

long() {
    if (desc_ob) {
        call_other(desc_ob,"monster_long",0);
	return;
    }
if (gender)
    write(short_desc + " ("+gender+")\n");
    write (long_desc);
    if(hit_point < max_hp/10) {
      write(cap_name+" is in very bad shape.\n");
      return;
    }
    if(hit_point < max_hp/5) {
      write(cap_name+" is in bad shape.\n");
      return;
    }
    if(hit_point < max_hp/2) {
      write(cap_name+" is somewhat hurt.\n");
      return;
    }
    if(hit_point < max_hp - 20) {
      write(cap_name+" is slightly hurt.\n");
      return;
    }
    write(cap_name+" is in good shape.\n");
}
id(str) {
    if (desc_ob) return call_other(desc_ob,"monster_id",str);
    return str == alt_name || str == name || str == alias || str == race;
}

heart_beat()
{
    int c;

    if(!this_object()) return;
    dam_taken_this_round=0;
    age += 1;
    if (!heal_start && hit_point < max_hp)
    {
       call_out("autoheal_monster", heal_intv);
        heal_start = 1;
     }
     
    already_fight = 0;
    /* If there is none here test_if_any_here will turn of heat_beat */
    if(!test_if_any_here()) {
	if(have_text && talk_done) {
	    have_text = 0;
           test_match(the_text);
	} else {
	    set_heart_beat(0);
	    return;
	}
    }
    if (kill_ob && present(kill_ob, environment(this_object()))) {
	if (random(2) == 1)
	    return;		/* Delay attack some */
	attack_object(kill_ob);
	kill_ob = 0;
	return;
    }
    if (attacker_ob && present(attacker_ob, environment(this_object())) &&
      spell_chance > random(100)) {
	say(spell_mess1 + "\n", attacker_ob);
	tell_object(attacker_ob, spell_mess2 + "\n");
        attacker_ob->hit_player(random(spell_dam_mon), spell_type);
    }
   attack();
/*
   if(alt_attacker_ob)
  if(!alt_attacker_ob->query_name()) alt_attacker_ob = attacker_ob;
  if(alt_attacker_ob && alt_attacker_ob != attacker_ob){
     if(present(alt_attacker_ob))
   hit_pet(weapon_class,spell_dam_mon);
   }
*/
    if (attacker_ob && whimpy && hit_point < max_hp/5)
       if(random(100)<41)  /*make monsters less annoying*/
	run_away();
    if(chat_nr > 0 || a_chat_nr > 0) {
	c = random(100);
	if(attacker_ob && a_chat_nr > 0) {
	    if(c < a_chat_chance){
		c = random(a_chat_nr);
                a_chat(c);
	    }
	} else {
	    if(c < chat_chance && chat_nr > 0){
		c = random(chat_nr);
                chat(c);
	    }
	}
    }
    if(random_pick) {
	c = random(100);
	if(c < random_pick)
	    pick_any_obj();
    }
    if(have_text && talk_done) {
	have_text = 0;
        test_match(the_text);
    }
}

can_put_and_get(str)
{
    if (!str)
	return 0;
    return 1;
}

int busy_catch_tell;

catch_tell(str) {
    string who;

    if (busy_catch_tell)    /* Should not happen, but does! */
	return;
    busy_catch_tell = 1;
    if(talk_done) {
	if(have_text) {
	    who = the_text;
	    the_text = str;
	    have_text = 1;
            test_match(the_text);
	} else {
	    the_text = str;
	    have_text = 1;
	}
    }
    busy_catch_tell = 0;
}

/*
 * Call the following functions to setup the monster.
 * Call them in the order they appear.
 */

set_name(n) {
    name = n;
    set_living_name(n);
    cap_name = capitalize(n);
    if(!short_desc)
      short_desc = cap_name;
    if(!long_desc)
      long_desc = "You see nothing special.\n";
/*    move_object(clone_object("obj/soul"), this_object()); */
/* why is this here?? */
    if(!message_hit) 
    message_hit=({"massacre"," to small fragments","smashed"," with a bone crushing sound","hit"," very hard","hit"," hard","hit","","grazed","","tickled"," in the stomach"});
}

set_level(l) {
    level = l;
/*   New Exp System will make this worthless with no wc.
    if(!weapon_class)
      weapon_class = WEAPON_CLASS_OF_HANDS;
*/
    if(!hit_point)
      hit_point = 50 + (level - 1) * 8;	/* Same as a player */
    max_hp = hit_point;
    if(!experience)
      experience = call_other("room/adv_guild", "query_cost", l-1);
   if(!heal_intv) {
      heal_intv = 35;
      heal_rate = 2;
      if(level < 12) heal_intv = 120;
    }
    if(!message_hit) 
    message_hit=({"massacre"," to small fragments","smashed"," with a bone crushing sound","hit"," very hard","hit"," hard","hit","","grazed","","tickled"," in the stomach"});
}

/* Optional */
set_alias(a) { alias = a; }
query_alias() { return alias; }
/* Optional */
set_race(r) { race = r; }
/* optional */
set_hp(hp) { max_hp = hp; hit_point = hp; }
/* optional */
set_ep(ep) { experience = ep; }
/* optional */
set_al(al) {
    /* Limit alignment to keep wizards from making their monsters worth
       much too much */
    if (al > 1000)
	al = 1000;
    if (al < -1000)
	al = -1000;
    alignment = al;
}
/* optional */
set_short(sh) { 
  short_desc = sh;
  if(!long_desc)
    long_desc = short_desc + "\n";
}
/* optional */
set_long(lo) { long_desc = lo; }
/* optional */

set_wc(wc) { pwc = wc; set_weapon_params("physical",pwc, weapon_special); }

set_weapon_special(special2){ weapon_special = special2; set_weapon_params("physical",pwc, weapon_special); }
/* optional */
set_ac(ac) { pac = ac; set_armor_params("physical",pac,res,armor_special);  }
set_res(res1) { res = res1; set_armor_params("physical",pac,res,armor_special);  }
set_armor_special(special1) { armor_special = special1; set_armor_params("physical",pac,res,armor_special);  }

/* pre-dtypes
set_wc(wc) { weapon_class = wc; }
set_ac(ac) { armor_class = ac; }
*/
/* optional */
set_move_at_reset() { move_at_reset = 1; }
/* optional
 * 0: Peaceful.
 * 1: Attack on sight.
 */
set_aggressive(a) {
    aggressive = a;
}
/* optional
 * 0: Can't attack other monsters.
 * 1: Can attack other monsters.
 */
set_can_kill(a) {
    can_kill = a;
}
/*
 * Now some functions for setting up spells !
 */
/*
 * The percent chance of casting a spell.
 */
set_chance(c) {
    spell_chance = c;
}
/* Message to the victim. */
set_spell_mess1(m) {
    spell_mess1 = m;
}
set_spell_mess2(m) {
    spell_mess2 = m;
}
set_spell_dam(d) {
    spell_dam_mon = d;
}

/* Set the frog curse. */
set_frog() {
    frog = 1;
}

/* Set the whimpy mode */
set_whimpy() {
    whimpy = 1;
}

/*
 * Force the monster to do a command. The force_us() function isn't
 * always good, because it checks the level of the caller, and this function
 * can be called by a room.
 */
init_command(cmd) {
    command(cmd);
}

/* Load chat */

set_chat_chance(c) {
    chat_chance = c;
}




/* Load attack chat */

set_a_chat_chance(c) {
    a_chat_chance = c;
}







set_dead_ob(ob)
{
    dead_ob = ob;
}

second_life()
{
   if(dead_ob)
	call_other(dead_ob,"monster_died",this_object());
}

set_random_pick(r)
{
    random_pick = r;
}

pick_any_obj() {
    object ob;
    int weight;


   if(!environment()) return;  /* verte */
    ob = first_inventory(environment(this_object()));
    while(ob) {
	if (call_other(ob, "get", 0) && call_other(ob, "short")) {
	    weight = call_other(ob, "query_weight", 0);
	    if (!add_weight(weight)) {
		say(cap_name + " tries to take " + call_other(ob, "short", 0) +
		    " but fails.\n");
		return;
	    }
	    move_object(ob, this_object());
	    say(cap_name + " takes " + call_other(ob, "short", 0) + ".\n");
	    if (call_other(ob, "weapon_class", 0))
		call_other(ob, "wield", call_other(ob,"query_name"));
	    else if (call_other(ob, "armor_class", 0))
		call_other(ob, "wear", call_other(ob,"query_name"));
	    return;
	}
	ob = next_inventory(ob);
    }
}

dumpa(str)
{
    string foo;
    if (sscanf(str, "players/%s", foo)) return 0;
    if(!str)
	str = "MONSTER_DUMP";
    save_object(str);
}

set_init_ob(ob)
{
    init_ob = ob;
}


init() {
  int ste,atc;

    if(this_player() == me)
	return;
    if(dead_ob)
	if(call_other(dead_ob,"monster_init",this_object()))
	    return;
    if (attacker_ob) {
	set_heart_beat(1); /* Turn on heart beat */
    }
    if(this_player() && !call_other(this_player(),"query_npc")) {
	set_heart_beat(1);
	if (aggressive == 1)
    {
     atc = random(50);
     ste = call_other(this_player(), "query_attrib", "ste");
     if (ste < atc)
	    kill_ob = this_player();
   }
    }
}

set_info(str) { info = str; }
set_hbflag(str) {hbflag = str; }
query_hbflag() {return hbflag;}
query_info() {return info; }
autoheal_monster() {
     if (hit_point < max_hp) {
        hit_point += heal_rate;
     }
        if (hit_point > max_hp)
               hit_point = max_hp;
  if(hit_point < max_hp)
   call_out("autoheal_monster", heal_intv);
   if(hit_point == max_hp) heal_start = 0;
  }
set_heal(hr, hi){
    if(hr < 0) return;
    if(hi < 0) return;
    heal_rate = hr;
     heal_intv = hi;
    }
set_alt_name(n) { alt_name = n; }
set_gender(str) { gender = str;}
query_aggressive() { return aggressive;}
query_race() {return race;}
set_message_hit(arr) {
   message_hit=arr;
}
query_message_hit(tmp) {
  string *mess;
    mess = ({message_hit[1],message_hit[0]});
  if (tmp < 30) {
    mess = ({message_hit[3],message_hit[2]});
  }
  if (tmp < 20) {
    mess = ({message_hit[5],message_hit[4]});
  }
  if (tmp < 10) {
    mess = ({message_hit[7],message_hit[6]});
  }
  if (tmp < 5) {
    mess = ({message_hit[9],message_hit[8]});
  }
  if (tmp < 3) {
    mess = ({message_hit[11],message_hit[10]});
  }
  if (tmp == 1) {
    mess = ({message_hit[13],message_hit[12]});
  }
  return mess;
}
given_me_junk(objg) {
  if(give_count < 2) return;
  give_count += 1;
  move_object(objg,environment(this_object()));
  write(cap_name+" drops "+objg->query_short()+"\n");
  return 1;
}

set_armor_params(style,class,res2,special2){
   string cat, subcat;
   int i,s;
   if(!armor_params) armor_params = ({ });
   if(sscanf(style, "%s|%s",cat,subcat) !=2){ 
      if(style != "physical" && style != "magical") style = "physical";
   }
   else if(cat != "other") style = "physical";
   if(member_array(style,armor_params) != -1){
      for(i=0;i<sizeof(armor_params);i++){
         if(style == armor_params[i]){
            armor_params[i+1] = class;
            armor_params[i+2] = res2;
            armor_params[i+3] = special2;
            this_object()->RegisterArmor(this_object(), armor_params );
            return;
         }
      }
   } 
   armor_params += ({style,class,res2,special2});
   this_object()->RegisterArmor(this_object(), armor_params );
}

set_weapon_params(style,class,special2){
   string cat, subcat;
   int i,s;
   if(!weapon_params) weapon_params = ({ });
   if(sscanf(style, "%s|%s",cat,subcat) !=2){ 
      if(style != "physical" && style != "magical") style = "physical";
   }
   else if(cat != "other") style = "physical";
   if(member_array(style,weapon_params) != -1){
      for(i=0;i<sizeof(weapon_params);i++){
         if(style == weapon_params[i]){
            weapon_params[i+1] = class;
            weapon_params[i+2] = special2;
            this_object()->RegisterWeapon(this_object(), weapon_params );
            return;
         }
      }
   }
   weapon_params += ({style,class,special2});
   this_object()->RegisterWeapon(this_object(), weapon_params );
}

/* Returns damage potential (wc) for all registered weapons, with
   additional weight for non-physical damage:
   25% bonus for magical
   50% bonus for other non-physical
*/
query_damage_potential() {
  int tot_dam_pot;
  int s,s2,i;
  object *weps;
  mixed *params;
  int class;
  string style;
  if(!Weapons)
    return query_wc();
  weps=keys(Weapons);
  s2=sizeof(weps);
  while(s2--)
    if(weps[s2] && (params=Weapons[weps[s2]])) {
      s=sizeof(params);
      weapon_class=0;
      for(i=0;i<s;i+=3) {
        style=params[i];
        class=params[i+1];
        if(style == "physical")
          continue;
        else if(style == "magical")
          tot_dam_pot += (5*class/4);  /* 25% bonus for magical damage type */
        else
          tot_dam_pot += (3*class/2);  /* 50% bonus for other styles */
      }
    }
  return query_wc()+tot_dam_pot;
}

/* Returns defensive potential (ac) for all registered armor,
   50% less potential for magical
   75% less potential for other non-physical
*/
query_defense_potential() {
  int tot_def_pot;
  int s,s2,i;
  mixed *params;
  object *armors;
  int class;
  string style;
  if(!Armors)
    return query_ac();
  armors=keys(Armors);
  s2=sizeof(armors);
  while(s2--)
    if(armors[s2] && (params=Armors[armors[s2]])) {
      s=sizeof(params);
      for(i=0;i<s;i+=4) {
        style=params[i];
        class=params[i+1];
        if(style == "physical")
          tot_def_pot += class;
        else if(style == "magical")
          tot_def_pot += (class/2);
        else
          tot_def_pot += (class/4);
      }
    }
  return tot_def_pot;
}


query_heal_rate(){ return heal_rate; }
query_heal_intv(){ return heal_intv; }
query_spell_chance(){ return spell_chance; }
query_spell_dam(){ return spell_dam_mon; }

set_ghost(x) { ghost = x; } /* verte 9.20.01 */
query_long() { return long_desc; } /* verte 3.17.02 */

query_message_hit_array() { return message_hit; }

set_spell_type(x) { spell_type=x; }

mixed *query_spell_info(string name) {
  int x,s;
  if(!spells)
    return 0;
  s=sizeof(spells);
  for(x=0;x<s;x++)
    if(spells[x][0]==name)
      return spells[x];
  return 0;
}

mixed *query_spells() {
  int s;
  string *spnames;
  if(!spells)
    return 0;
  s=sizeof(spells);
  spnames=allocate(s);
  while(s--)
    spnames[s]=spells[s][0];
  return spnames;
}

/* Redid this part because calling m_decode in /obj/monitor
   directly would eat the #s from the string */
string process_ansi(string str) {
  string *words,as;
  int s;
  if(!str)
    return 0;
  words=explode(str,"$");
  s=sizeof(words);
  while(s--)
    if(as=ANSI(words[s])) {
      words[s]=as;
    }
  return implode(words,"");
}

varargs status add_spell(string name, string mess_target, string mess_room,
                        int chance, mixed damage, mixed type, status hit_all_attackers,
                        string ex_fun, object ex_ob) {
  mixed *nspell;
  if(!name)
    return 0;
  if(chance <= 0 || chance > 100)
    return 0;
  if(!spells)
    spells=({});
  if(query_spell_info(name))
    return 0;
  nspell=allocate(9);
  nspell[0]=name;
  nspell[1]=process_ansi(mess_target);
  nspell[2]=process_ansi(mess_room);
  nspell[3]=chance;
  if(intp(damage))
    nspell[4]=({"1-"+damage});
  else if(stringp(damage))
    nspell[4]=({damage});
  else if(pointerp(damage)) {
    int s;
    s=sizeof(damage);
    while(s--) {
      if(intp(damage[s]))
        damage[s]="1-"+damage[s];
      else if(!stringp(damage[s]))
        damage[s]="1-0";
    }
    nspell[4]=damage;
  } else
    return 0;
  if(!type)
    nspell[5]=({"physical"});
  else if(stringp(type))
    nspell[5]=({type});
  else if(pointerp(type))
    nspell[5]=type;
  else
    return 0;
  if(sizeof(nspell[4])!=sizeof(nspell[5]))
    return 0;
  nspell[6]=hit_all_attackers;
  if(ex_fun) {
    nspell[7]=ex_fun;
    if(ex_ob && objectp(ex_ob))
      nspell[8]=ex_ob;
    else
      nspell[8]=this_object();

  } else {
    nspell[7]=0;
    nspell[8]=0;
  }
  spells+=({nspell});
  return 1;
}

status remove_spell(string name) {
  mixed *rspell;
  if(!spells)
    return 0;
  rspell=query_spell_info(name);
  if(rspell) {
    spells-=({rspell});
    return 1;
  }
  return 0;
}

status set_multi_cast(status x) {
  if(x) 
    multi_cast=1;
  else
    multi_cast=0;
}

int *rand_dam(string *idam) {
  int *ndam;
  int s,x,y,t;
  int min,max,num_dice,side_dice;
  s=sizeof(idam);
  ndam=allocate(s);
  for(x=0;x<s;x++) {
    if(sscanf(idam[x],"%d-%d",min,max)==2)
      if(max>min)
        ndam[x]=min+random(max-min+1);
      else 
        ndam[x]=0;
    else if(sscanf(idam[x],"%dd%d+%d",num_dice,side_dice,t)==3 ||
            sscanf(idam[x],"%dd%d",num_dice,side_dice)==2) {
      for(y=0;y<num_dice;y++)
        t+=random(side_dice+1);
      ndam[x]=t;
    } else
      ndam[x]=0;
  }

  return ndam;
}

status check_attacking_me(object ob) {
  return (object)ob->query_attack()==this_object();
}

status check_player_target(object ob) {
  return (int)ob->is_player();
}

status check_non_player_target(object ob) {
  return !check_player_target(ob);
}

void execute_spell(mixed *cur_spell,object room) {
  int dam,num_targets;
  int s;
  status area;
  object *targets;
  if(cur_spell[6]==0) {
    targets=({attacker_ob});
  } else if(cur_spell[6]==2) {
    if(alt_attacker_ob!=attacker_ob) 
      targets=({alt_attacker_ob});
    else
      return;
  } else {
    targets=filter_array(all_inventory(room),"check_attacking_me",this_object());
  }
  s=sizeof(targets);
  if(s==0)
    return;
  if(cur_spell[6]==1 || cur_spell[6]==3 || cur_spell[6]==4)
    area=1;
  if(cur_spell[6]==3 || cur_spell[6]==6)
    targets=filter_array(targets,"check_player_target",this_object());
  else if(cur_spell[6]==4 || cur_spell[6]==7)
    targets=filter_array(targets,"check_non_player_target",this_object());
  s=sizeof(targets);
  if(s==0)
    return;
  if(cur_spell[6]==6 || cur_spell[6]==7)
    targets=({targets[random(s)]});
  if(!area) {
    if(!targets[0] || !present(targets[0],room))
      return;
    if(cur_spell[1])
      tell_object(targets[0],EMOTER(cur_spell[1],targets[0]));
    if(cur_spell[2])
      tell_room(room,EMOTER(cur_spell[2],targets[0]),({this_object(),targets[0]}));
    dam=(int)targets[0]->do_damage(rand_dam(cur_spell[4]),cur_spell[5]);
    if(cur_spell[7])
      call_other(cur_spell[8],cur_spell[7],targets[0],room,dam);
  } else {
    int x;
    if(cur_spell[2])
      tell_room(room,EMOTER(cur_spell[2],0),({this_object()}));
    for(x=0;x<s;x++) {
      dam=(int)targets[x]->do_damage(rand_dam(cur_spell[4]),cur_spell[5]);
      if(cur_spell[1])
        tell_object(targets[x],EMOTER(cur_spell[1],targets[x]));
      if(cur_spell[7])
        call_other(cur_spell[8],cur_spell[7],targets[x],room,dam);
    }
  }
}

attack() {
  if(spells && attacker_ob) {
   object room;
   room=environment();
   if(room && present(attacker_ob,room)) {
     int spchance,s,x;
     s=sizeof(spells);
     if(multi_cast) {
       for(x=0;x<s;x++) {
         if(attacker_ob) {
           spchance=random(100)+1;
           if(spchance<spells[x][3])
             execute_spell(spells[x],room);
         }
       }
     } else {
       int chance_total;
       spchance=random(100)+1; 
       chance_total=0;
       for(x=0;x<s;x++) {
         if(spchance > chance_total && spchance <= spells[x][3]+chance_total) {
           execute_spell(spells[x],room);
           break;
         } else if(room) {
           chance_total+=spells[x][3];
         }
       }
     }     
   } 
  }
  ::attack();
}

int avg_dam(string dstr) {
  int min,max,num_dice,side_dice,t;
  if(sscanf(dstr,"%d-%d",min,max)==2) {
    if(max>min)
      return min+((max-min)/2);
    else 
      return 0;
  } else if(sscanf(dstr,"%dd%d+%d",num_dice,side_dice,t)==3 ||
          sscanf(dstr,"%dd%d",num_dice,side_dice)==2) {
    min=t;
    max=min+num_dice*side_dice;
    min+=num_dice;
    return min+((max-min)/2);
  } else
    return 0;
}

int query_spell_exp() {
  int x,y,s,ss;
  int extra_exp_tot;
  int extra_exp_round;
  int chance_total;
  int spells_used;
  int bonus;
  s=sizeof(spells);
  if(!spells || !sizeof(spells))
    return 0;
  chance_total=0;
  extra_exp_tot=0;
  for(x=0;x<s;x++) {
    extra_exp_round=0;
    ss=sizeof(spells[x][4]);
    /* Calculate total damage with a bonus for non-physical */
    for(y=0;y<ss;y++) {
      if(spells[x][5][y]=="physical")
        extra_exp_round+=avg_dam(spells[x][4][y]);
      else
        extra_exp_round+=avg_dam(spells[x][4][y])*NONPHYS;
    }
    switch(spells[x][6]) {
      default: bonus=100; break;
      case 1: bonus=120; break; /*extra exp for area attacks */
      case 3: case 4: bonus=110; break; /*for limited area attacks */
      case 2: bonus=80; /*Less than standard for alt_attacker */
    }
    extra_exp_round+=extra_exp_round*bonus/100;
    
    /* Average damage is spell avg damage*chance in multicast mode */
    if(multi_cast)
      extra_exp_tot+= (extra_exp_round * spells[x][3] / 100);
    else {
      chance_total+=spells[x][3];
      extra_exp_tot+=extra_exp_round;
    }
    if(chance_total>=100)
      break;
  }
  if(multi_cast)
    return extra_exp_tot;
  else /* In non multi-cast motive the chance is cumulative not averaged */
    return extra_exp_tot * chance_total / 100 / x;
}

query_total_level() { return level; }
