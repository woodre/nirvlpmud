[Again, I'm not your sponsor, so if this conflicts with what you've been
told by another, do it their way. If you have any questions holler.]

This section deals primarily with style and is a bit long. It might
seem premature to tell you what your code should look like before you
have learned how to write it. However, it is a fundamental subject of
great importance. It'll certainly improve the overall quality of what
you produce, at a very low cost. Mainly it's a matter of
self-discipline.

Here are some good arguments for making the effort:

*)  It makes the code much more readable, not only for others,
    but also for yourself, particularly if you have to read or
    alter the code six months after you produced it. 
*)  Since it is easier for others to read, and therefore easier
    to understand what you have done, it will be easier to help
    you in case of problems.
*)  Writing code properly actually makes it better, believe it
    or not. The reason for this is simply that writing code badly
    makes it easy to miss simple errors that get hidden among
    the crummy code.
*)  It can be real hard to find people willing to help you debug
    badly formatted code. I personally will not help people to
    debug code that looks too awful [harsh, I know]. The reason
    is that it's simply not worth the effort. With bad looking 
    code there'll be lots of stupid errors (mostly misplaced or
    missing brackets) that'll turn up as soon as you start to 
    indent the code properly.

What follows here is a rather lengthy instruction of how to put down
your code in writing. I suggest reading it now even though you might
not fully understand what is being discussed, then go back and re-read
it later after having learned the skills necessary. Doing that will
make sure you'll remember the correct way of formatting your code.

Standards
    1.  One indent level is 4 spaces long, no more, no less. 
        A new indent level is started at the beginning of each block. 

    2.  Reserved words have a space after them, before the 
        opening (, if any:
e.g.
while (test)
    statement;

    3.  Block brackets start and end in the same column; the 
        column of the first letter in a statement opening a block. 
e.g.
if (this)
{
    statement;
}
else if (that)
{
    another_statement;
}
else
{
    default_statement;
}

    Now, this is almost a religious matter for some coders.
    Representatives of another sect preaches that the block 
    opening brace should be on the end of the line of the 
    block statement

if (this) {
    statement;
}
else if (that) {
    another_statment;
}
else {
    default_statment;
}

    How you do this really isn't that important. Not as long
    as you do it the way I say [The first example], or you'll
    get cooties. No, seriously, pick one of the two ways of
    doing it and stick to it. The only real important thing
    is that you keep the indention-level straight throughout
    the code. If we all agree on something, it's that wavy
    indention-levels is something not to be tolerated.

    4.  Several arguments on a line separated by a comma have a
        space following the comma. ;-separated lists and binary
        operators have a space both in front of, and after the
        operator.
e.g.
int a, b, c;

for (a = 0 ; a < 10 ; a++)
{
    b = function_call(a, b * 2);
    c = b * 3 / 4;
}

    5.  All #define and #include statements should be placed at
        the top of the file. It's possible to spread them out, but
        that will just be confusing.

        The same goes for prototypes and global/static variables
        used in the file. Clump them all together, with a proper
        comment header, in the top of the file. It's possible to
        spread them out, but oh how easy it is to miss them when
        reading the code later...

    6.  Declarations of functions have the return type on a
        separate line from the function name.
e.g.
public void
my_function(int a, int b)
{
    < code >
}

    7.  Break long lines of code in proper places so that they
        don't wrap on their own beyond the end of a 80-width screen.
        It looks ugly and becomes hard to read, not to mention print.

    8.  The file should begin with a proper header following this
        general outline:
/*
 *	File:			02_style.txt
 *	Function:		
 *	Author(s):		Sparkle@Nirvana
 *	Copyright:		Copyright (c) 2003 Sparkle
 *					All Rights Reserved.
 *	Source:			08/11/2003
 *	Notes:			
 *	Change History:
 */

        Read the game Copyright statement NOW in order to know
        what rules apply to code you produce for the game, in the
        game. It ought to reside in the file
        /doc/build/code_policy. If not, simply ask one of the
        game administrators.

    9.  Start each _unique_ function with a header looking like this: 

/* 
 * Function name: <Function name>
 * Description:   <Short description of what the function does,
 *                 usually no more than three lines.
 * Arguments:     <A list of all arguments, one per line
 *                   arg1 - description no longer than the line.
 *                   arg2 - next argument, etc. >
 * Returns:       <What the function returns>
 */
    
        If the function doesn't take any arguments, or doesn't
        return anything, simply remove those lines in the header.

    10. Put suitable comments in the code here and there when
        doing something that might look a bit obscure. Remember also
        that on your (assumed) level of competence, a lot of things
        are obscure :) Use your own judgement.
/*
 * Comment for code following this comment,
 * telling what it does
 */
< code >

    11. Make sure all function names and local variables are
        written in lowercase alphabetical characters, possibly
        spacing words with an underscore:

e.g.
function_name()
int id, level;

        Global variables should be written using the first letter of
        the word capitalized:
e.g.
int GlobalTime;

        #defines should be written in capitals
e.g.
#define AMOEBA "one celled creature"
        
        Doing this makes it easy to see what kind of
        symbol are being handled at all times.


