/* Most of this screwed up code was thought of by myself. Rumplemintz helped with the counter and the if, else if, etc.
   Mizan helped with the code to make it so only one person could enter the "instance" once per reset */

inherit "/room/room";
#include <ansi.h>
int count;
int maximum_occupants;

reset(arg)
{
::reset(arg);
count = 0;


if(arg) return;
	set_light(1);
	short_desc = HIK+"A large playground"+NORM;
	long_desc =
		"I will fix this later\n";
}

init(){
	    if(this_player() && room() && !safely_occupied())
		{
	    	tell_object(this_player(), "There are too many people inside " +
	        this_object()->query_alias() + "!\nYou are booted out!\n");
	    	tell_outside(this_player()->query_name() + " arrives, flying out of the " + this_object()->query_alias() + "!\n");
	    	move_object(this_player(), room());
	    	tell_inside(this_player()->query_name() + " cannot fit onboard and leaves falling out.\n");
	    	return 1;
	}

	::init();
	
	add_action("reload", "reload");
	add_action("getthefuckout", "exit");
}

reload(){
	int mobs;
	int different;
	
		
	if (present("shinshi_tampon_mob"))
	{
		write("You cannot reload until all the mobs have been cleared.\n");
		return 1;
	}
	else if (present("shinshi_key_mob"))
	{
		write("You cannot reload until all the mobs have been cleared.\n");
		return 1;
	}
	else if (present("shinshi_lip_mob"))
	{
		write("You cannot reload until all the mobs have been cleared.\n");
		return 1;
	}
	else if (present("pre-k teacher"))
	{
		write("You cannot reload until all the mobs have been cleared.\n");
		return 1;
	}
	else
	{
		if (count <= 40)
		{
			mobs = random(60);
			different = random(80);
			
			if (mobs <= 19)
			{
				if (different <= 19)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/teacher.c"),this_object());
				}
				
				if (different <= 39)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentlip.c"), this_object());
				}
				
				if (different <= 59)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentkey.c"), this_object());
				}
				
				if (different <= 79)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studenttampon.c"), this_object());
				}
			}
			
			else if (mobs <= 39)
			{
				if (different <= 19)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/teacher.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/teacher.c"), this_object());
				}
				
				else if (different <= 39)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentlip.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentlip.c"), this_object());
				}
				else if (different <= 59)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentkey.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentkey.c"), this_object());
				}
				
				else
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studenttampon.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studenttampon.c"), this_object());
				}
			}
			
			else
			{
				if (different <= 19)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/teacher.c"),this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/teacher.c"),this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/teacher.c"),this_object());
				}
				
				else if (different <= 39)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentlip.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentlip.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentlip.c"), this_object());
				}
				
				else if (different <= 59)
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentkey.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentkey.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studentkey.c"), this_object());
				}
				
				else
				{
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studenttampon.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studenttampon.c"), this_object());
					move_object(clone_object("/players/shinshi/areas/coining/mobs/studenttampon.c"), this_object());
				}
			}
		}
			count++;
			write(count+"\n");
		
		if (count == 41)
		{
			write("You may not reload any further at this time.\n");
			call_other(this_player(), "move_player","leaves#players/shinshi/entrancehall.c");
			say(this_player()->query_name()+" is forced outside the room.\n");
		}
		return 1;
	}
}

getthefuckout(){
	
	if (present("shinshi_tampon_mob"))
	{
		write("You cannot leave until all the mobs have been cleared.\n");
	}
	else if (present("shinshi_key_mob"))
	{
		write("You cannot leave until all the mobs have been cleared.\n");
	}
	else if (present("shinshi_lip_mob"))
	{
		write("You cannot leave until all the mobs have been cleared.\n");
	}
	else if (present("pre-k teacher"))
	{
		write("You cannot leave until all the mobs have been cleared.\n");
	}
	else
	{
		call_other(this_player(), "move_player","through the misty doorway#players/shinshi/entrancehall.c");
		say(this_player()->query_name()+"exits through the misty doorway.\n");
	}
	return 1;
}

safely_occupied()
{
    object ob;
    int i;

    i = 0;

    if(!maximum_occupants) return 1;

    else if(this_player() && this_player()->query_level() >= 21) return 1;

    else if(this_player())
    {
        /* count up our livings */
        ob = first_inventory(this_object());
        while(ob)
        {
            if(living(ob)) i++;
            ob = next_inventory(ob);
        }

        if(i >= maximum_occupants)
            return 0;
        else return 1;
    }
    else return 0;
}

room(arg)
{
    if(!arg) 
        return environment(this_object());
    else
        return environment(arg);
}

set_maximum_occupants(arg) { maximum_occupants = arg; }
query_maximum_occupants() { return maximum_occupants; }