#include "/players/mythos/closed/guild/def.h"
#include "/obj/security.h"
object player;
string it, dirdest;
int i;

start_see_shadow(who) {
player = who;
shadow(player, 1);
return 1;}

stop_shadow_me() {
shadow(player, 0);
return 1;}

/*
do_quit() {
   shadow(player, 0);
   player->do_quit();
return 1;}
   
quit() {
   shadow(player, 0);
   player->quit();
return 1;}
*/

see_dark() {
if(set_light(0) == 0) { return 0; }
    if (set_light(0) < -4) {
	  write("It is too dark.\n");
	  write("Even your fae eyes can not pierce this darkness.\n");
	  write("Perhaps the darkness is somehow magical.\n");
    return 1; }
return 0; }
    
inv() {
    object ob, myself;
    myself = player;
    if (see_dark())
	return 1;
    ob = first_inventory(myself);
    while (ob) {
	string str;
	str = call_other(ob, "short");
	if (str) {
	    write(str + ".\n");
	    it = str;
	}
	ob = next_inventory(ob);
    }
return 1; }

look(str, remote) {
    object ob, ob_tmp;
    int jj;
    string item;
    int max, lz;
    string null,null2;
    jj = 0;
    if(see_dark()) 
    return 1;
    if (!str) {
        if (remote && call_other(player, "query_brief")) {
	    write(call_other(environment(environment()), "short")); write("\n");
	} else {
	if(sscanf(object_name(environment(player)),"%smythos/droom%s",null,null2) == 2) {
    environment(player)->long();
    jj = 1;
  }
  if(!jj) {
	if(call_other(environment(player), "query_long")) {
	    write(call_other(environment(player), "query_long"));
	 dirdest = 0;
	dirdest = environment(player)->query_dest_dir();
	if(!dirdest)
	    write("    No obvious exits.\n");
	else {
	    i = 1;
	    if (sizeof(dirdest) == 2)
		write("    There is one obvious exit:");
	    else
		write("    There are " + 
		     environment(player)->convert_number(sizeof(dirdest)/2) +
		      " obvious exits:");
	    while(i < sizeof(dirdest)) {
		write(" " + dirdest[i]);
		i += 2;
		if (i == sizeof(dirdest) - 1)
		    write(" and");
		else if (i < sizeof(dirdest))
		    write(",");
	    }
	    write("\n");
	}
	    }
	  else { 
	  lz = 0;
	if(set_light(0) < 1) { 
	move_object(clone_object("/players/mythos/closed/guild/lights.c"),
	  environment(player));
	 lz = 1;}
	  write(call_other(environment(player),"long"));
	  if(lz) { 
	destruct(present("lights",environment(player)));} }
	 }
	 }
	ob = first_inventory(environment(player));
	max = 20;
	while(ob && max > 0) {
	    if (ob != player) {
		string short_str;
		short_str = call_other(ob, "short");
		if (short_str) {
		    max -= 1;
		    write(short_str + ".\n");
		    it = short_str;
		}
	    }
	    ob = next_inventory(ob);
	}
	return 1;
    }
    if (sscanf(str, "at %s", item) == 1 || sscanf(str, "in %s", item) == 1) {
	item = lower_case(item);
	ob = present(item, player);
	if (!ob && call_other(environment(player), "id", item))
	    ob = environment(player);
	if (!ob)
	    ob = present(item, environment(player));
	if (!ob) {
	    write("There is no " + item + " here.\n");
	    return 1;
	}
	it = item;
	lz = 0;
	if(set_light(0) < 1) { 
	move_object(clone_object("/players/mythos/closed/guild/lights.c"),ob);
	 lz = 1;}
	call_other(ob, "long", item);
	if(lz) { 
	destruct(present("lights",ob));}
	if (!call_other(ob, "can_put_and_get", item))
	    return 1;
        if (living(ob)) {
	    object special;
	    special = first_inventory(ob);
	    while (special) {
	        string extra_str;
		extra_str = call_other(special, "extra_look");
		if (extra_str)
		    write(extra_str + ".\n");
		special = next_inventory(special);
	    }
	}
	ob_tmp = first_inventory(ob);
	while (ob_tmp && call_other(ob_tmp, "short") == 0)
	    ob_tmp = next_inventory(ob_tmp);
	if (ob_tmp) {
	    if (living(ob))
		write("\t" + capitalize(item) + " is carrying:\n");
	    else
		write("\t" + capitalize(item) + " contains:\n");
	}
	max = 20;
	ob = first_inventory(ob);
	while (ob && max > 0) {
	    string sh;
	    sh = call_other(ob, "short");
	    if (sh)
		write(sh + ".\n");
	    ob = next_inventory(ob);
	    max -= 1;
	}
	return 1;
    }
    write("Look AT something, or what?\n");
return 1; }

move_player(dir_dest) {
  string dir, dest, current_room;
  object ob, hunter, hunted;
  int jj;
  int is_light, hunting_time;
  int no_light, lz;
  string null,null2;
  jj = 0;
  if(!dir_dest)
    return 0;

  if (sscanf(dir_dest, "%s#%s", dir, dest) != 2) {
    tell_object(player, "Move to bad dir/dest\n");
    return;
  }
/*
   if(player->query_attack()) {
   tell_object(player,"You are in combat!\nYou may not leave.\n");
  return 1;
  }
*/
  current_room = dest;
  hunting_time -= 1;
  if (hunting_time == 0) {
    if (hunter)
      call_other(hunter, "stop_hunter");
    hunter = 0;
    hunted = 0;
  }
  if ( player->query_attack() && present( player->query_attack())) {
    hunting_time = 10;
    tell_object(player, "You are now hunted by " +
		call_other(player->query_attack(), "query_name", 0) + ".\n");
    hunter = player->query_attack();
  }
  is_light = set_light(0);
  if (is_light < -5) { no_light = 0; }
  else { no_light = 1;}
  if(is_light == 0) { 
  no_light = 1; }
  if (player->query_ghost())
    say("some mist" + " " + "leaves" + " " + dir +
     ".\n");
  else if (dir == "X" && player->query_invis() < INVIS_TELEPORT)
    say(capitalize(player->query_real_name()) + " " +
     "vanishes" + ".\n");
  else if (player->query_invis() < NO_SHORT && no_light)
    say(capitalize(player->query_real_name()) + " " +
     "leaves" + " " + dir + ".\n");
  move_object(player,dest);
  is_light = set_light(0);
  if (is_light < -5) { no_light = 0; }
  else { no_light = 1;}
  if(is_light == 0) { 
  no_light = 1; }
   if(this_player())
  if (tl >= 20)
    tell_object(player, dest + "\n");
  if (player->query_ghost() && no_light)
    say("some mist" + " " + "arrives" + ".\n");
  else if (player->query_invis() < INVIS_TELEPORT && dir == "X")
    say(capitalize(player->query_real_name()) + " " +
     "quietly enters"+ ".\n");
  else if (player->query_invis() < NO_SHORT && no_light)
    say(capitalize(player->query_real_name()) + " " +
     "arrives" + ".\n");
  if (hunted && present(hunted))
    attack_object(hunted);
  if (hunter && present(hunter))
    call_other(hunter, "attack_object", player);
  if (player->query_npc())
    return;
  if (see_dark()) {
    write("A dark room.\n");
    write("Even your fae eyes can not pierce this darkness.\n");
	write("Perhaps the darkness is somehow magical.\n");
    return;
  }
  ob = environment(player);
  if (player->query_brief()) {
    write(call_other(ob, "short", 0)); 
    write(".\n"); 
  } else { 
  if(sscanf(object_name(environment(player)),"%smythos/droom%s",null,null2) == 2) {
    environment(player)->long(); jj = 1;
  }
  if(!jj) {
  if(call_other(environment(player), "query_long")) {
  write(environment(player)->short()+"\n");
	    write(call_other(environment(player), "query_long"));
	dirdest = 0;
	dirdest = environment(player)->query_dest_dir();
	if(!dirdest)
	    write("    No obvious exits.\n");
	else {
	    i = 1;
	    if (sizeof(dirdest) == 2)
		write("    There is one obvious exit:");
	    else
		write("    There are " + environment(player)->convert_number(sizeof(dirdest)/2) +
		      " obvious exits:");
	    while(i < sizeof(dirdest)) {
		write(" " + dirdest[i]);
		i += 2;
		if (i == sizeof(dirdest) - 1)
		    write(" and");
		else if (i < sizeof(dirdest))
		    write(",");
	    }
	    write("\n");
	}
	    }
	  else { 
	  lz = 0;
	if(set_light(0) < 1) { 
	move_object(clone_object("/players/mythos/closed/guild/lights.c"),
	  environment(player));
	 lz = 1;}
	  write(call_other(environment(player),"long"));
	  if(lz) { 
	destruct(present("lights",environment(player)));} }
	  }
	  }
  ob = first_inventory(ob);
  while(ob) {
    if (ob != player) {
      string short_str;
      short_str = call_other(ob, "short");
      if (short_str)
	write(short_str + ".\n");
    }
    ob = next_inventory(ob);
  }
}


lower_attrib() {
  int la;
  string las;
  la = random(9);
  if (la == 8) {
    if((present(fear,player)->query_fae()) > 1) { 
    present(fear,player)->raise_fae(-1);
    return 1;}
    player->lower_attrib();
    return 1;}
  if (la == 7) las = "strength";
  if (la == 6) las = "will_power";
  if (la == 5) las = "magic_aptitude";
  if (la == 4) las = "piety";
  if (la == 3) las = "stamina";
  if (la == 2) las = "stealth";
  if (la == 1) las = "luck";
  if (la == 0) las = "intelligence";
  if (call_other(player, "query_attrib", extract(las,0,2)) < 2) {
  player->lower_attrib();
  return 1;}
 call_other(player, "raise_" + las, -1);
return 1; }

run_away() { return 1;}

test_dark() {
  if(set_light(0) == 0) { return 0; }
    if (set_light(0) < -5) {
	  write("It is too dark.\n");
	  write("Even your fae eyes can not pierce this darkness.\n");
	  write("Perhaps the darkness is somehow magical.\n");
	return 1;
    }
    return 0;
}

add_exp(arg) {
int mm;
  if(this_player())
  if(this_player()->query_level() > 20 && query_ip_number(this_player())) {
      tell_object(this_player(),"Please call add_sxp(#) to change experience\n");
  return 1;}
  mm = arg;
  if(mm > 1)
  mm = mm/(2+random(2));
  shadow(player,0);
  player->add_exp(mm);
return 1; }

add_sxp(int a) {
  shadow(player,0);
  player->add_exp(a);
}

