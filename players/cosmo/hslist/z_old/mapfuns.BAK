/*----------------------------------------------------------------------*/
/* This file contains mapping functions for use with the high score     */
/* view screen.                                                         */

#pragma strict_types
#pragma save_types

/* Written by Bastion
 * Function: m_values
 * Purpose : Return an array of the contents of mapping map.
 */
mixed *
m_values ( mapping map ) {
    mixed *values, *indices;
    int i, size;

    values = ({ });
    indices = keys(map);
    for ( i = 0, size = sizeof(indices); i < size; i++ )
        values += map[indices[i]];
    return values + ({ });
}
    
/*-------------------------------------------------------------------*/
/* Purpose: return 1 if key is in the mapping; 0 if not.             */
status member(mapping m, mixed key) {
int x;
mixed *indices;
  indices = keys(m);
  for (x=0; x<sizeof(m); x++) {
    if (indices[x]==key) return 1;
  }
  return 0;
}

/*-------------------------------------------------------------------*/
/* Purpose: Compare two integers. Return -1, 0, or 1 for <, =, or >. */
int intcmp(int a, int b) {
  if (a < b) return -1;
  else if (a = b) return 0;
    else  return 1;
}

/*-------------------------------------------------------------------*/
/* Purpose: Sort an array of integers and return the sorted array.   */
int *sort_array(int *nums) {
int x, y, temp;
  for (x=0; x < (sizeof(nums)-1); x++) {
    for (y=x+1; y < sizeof(nums); y++) {
      if (intcmp(nums[x], nums[y]) < 0) {
        temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
      }
    }
  }
  return nums;
}

/*-------------------------------------------------------------------*/
/* Purpose: write the keys and values of a mapping in tabular form.  */
void display_map(mapping m) {
int x, y, *values;
string *indices, *s_names;
  indices = keys(m);
  values = m_values(m);
  values = sort_array(values);
  s_names = allocate(sizeof(indices));
  for (x=0; x<sizeof(indices); x++) {
    y=0;
    while((y<sizeof(values)) && (m[indices[x]]!=values[y])) y++;
    s_names[y]=indices[x];
    values[y]=-1;
  }
  values = m_values(m);
  values = sort_array(values);
  for (x=0; x<sizeof(s_names); x++) {
    if (strlen(s_names[x]) < 8)
      write(s_names[x] + "\t\t" + values[x] + "\n");
    else
      write(s_names[x] + "\t" + values[x] + "\n");
  }
}

/*-------------------------------------------------------------------*/
