/*----------------------------------------------------------------------*/
/* This object creates a list of players along with the experience that */
/* they have earned since the previous reboot.  The names, with their   */
/* earned experience, are sorted and a "Top 15 List" is displayed for   */
/* experience earned during the current reboot period, and most experi- */
/* ence ever gained during one reboot period.  This object includes     */
/* /obj/user/channel.c so that the catch_tell function can collect      */
/* player data via the msg channel.  Data is then stored and sorted     */
/* using a mapping of arrays, with player name as the key field.        */
/*    Thanks to Beck and Sado for ideas and implementation              */
/*    help, and to Wizardchild for his mapping functions.               */
/*                      - Cosmo, November 1998                          */
/*  WARNING: THIS OBJECT IS STILL A WORK-IN-PROGRESS                    */

#include "/players/cosmo/closed/ansi.h"
#include "/obj/user/channel.c"
#include "/players/cosmo/hslist/tempdata.h"
#define MYFUN "/players/cosmo/hslist/mapfuns.c"
#define WIZCFUN "/players/cosmo/hslist/wizc_mapfuns.c"

mapping exp_map, delta_map, alltime;
int starttime;

/*-------------------------------------------------------------------*/
reset(arg) {
int current;
  if(arg) return;

  /* Get the time of reboot and the current time */
  restore_object("log/upsince");
  current=time();

  /* If reboot was less than 100 seconds ago, reset the mappings */
  if ((current-starttime)<29000) {
    exp_map = ([]);
    delta_map = ([]);
  }
}

/*-------------------------------------------------------------------*/
short() { return "A virtual display screen [VDS]"; }

long() {
  write(short()+"\n");
  write("View the VDS to see the high scores.\n");
}

/*-------------------------------------------------------------------*/
id(str) { return str == "VDS" || str == "screen" || str == "display" ||
          str == "vds" || str == "display screen"; }

/*-------------------------------------------------------------------*/
/* Used in /obj/user/channel.c - must return > 20 */
query_level() { return 22; }

query_weight() { return 1; }
query_value() { return 5; }
get() { return 1; }

/*-------------------------------------------------------------------*/
init() {
  channel_names = ({});
  add_channel("msg");
  add_action("view"); add_verb("view");
}

/*-------------------------------------------------------------------*/
view(str) {
  if (!id(str))
    return 0;
  say(this_player()->query_name() + " looks at the virtual display.\n");
  get_data();
  write("CURRENT REBOOT PERIOD\n");
  write("PLAYER\t\tEXPERIENCE\n");
  MYFUN->display_map(delta_map);
  return 1;
}

/*----------------------------------------------------------------------*/
/* This function won't work unless this object is added to the people   */
/* array found in /obj/users/channel.c.  In the broadcast() function,   */
/* need to add:  people += "/players/cosmo/hslist/hsscreen.c";  right   */
/* after people = users();                                                    */

catch_tell(str) {
string pname, in_out, junk1, junk2;
int pexp;               /* Player's exp */
object who;

  /* Make sure it is a valid msg str; don't include the guest or dead */
  if ((sscanf(str, "%s (%s) has %s %s", pname, junk1, in_out, junk2) == 4)
     && (pname!="Guest") && (pname!="Some mist")) {

    if (in_out=="entered") {
      /* Convert the player's name to an object, get the exp, and store it */
      who = present(pname, this_player());
      pexp = who->query_exp();
      /* Still need code to store info in a mapping */
    }

    /* Need an else part here to store exit info */
    /* Try to query the exp; otherwise get it from the ENTER log */
  }

  else write("Invalid msg string.\n");
}

/*-------------------------------------------------------------------*/
/* From Wizardchild                                                  */
restore_map() {
string save_map;
  alltime = ([]); /* zero out */
  restore_object("players/cosmo/hslist/scores");
  alltime = WIZCFUN->extract_mapping(save_map);
  save_map = 0;
  return 1;
}

/*-------------------------------------------------------------------*/
/* From Wizardchild                                                  */
save_map() {
string save_map;
  save_map = WIZCFUN->store_mapping(alltime);
  save_object("players/cosmo/hslist/scores");
  save_map = 0;
  return 1;
}

/*-------------------------------------------------------------------*/
/* This stuff is temporary for testing purposes until I can get the  */
/* catch_tell() function to work. But most of this will probably go  */
/* in catch_tell().                                                  */

get_data() {
string *stuff;
int *exp_d, x, pexp;
string pname, in_out, junk1, junk2;

/* The array data are stored in tempdata.h */
  stuff = ENTRIES;
  exp_d = EXP_DATA;

  for (x=0; x < sizeof(stuff); x++) {
    if ((sscanf(stuff[x], "%s (%s) has %s %s", pname, junk1, in_out, 
     junk2) == 4) && (pname!="Guest") && (pname!="Some mist")) {

      /* Convert the player's name to an object, get the exp, and store it */
      pexp = exp_d[x];

      /* If the player enters and is not already in the mapping, add it. */
      if (in_out=="entered") {
        if (!MYFUN->member(exp_map, pname)) exp_map += ([pname:pexp]);
        /* Else if the player is already in the mapping, do nothing */
      }
      else {   /* The player is leaving */
        /* Add the player to the delta mapping, if not already there */
        if (!MYFUN->member(delta_map, pname)) delta_map += ([pname:0]);
        /* Calculate the change in exp and store it in the mapping */
        delta_map[pname] = pexp - exp_map[pname];
      }
    }
    else write("Invalid msg string.\n");
  }
  return 1;
}

/*-------------------------------------------------------------------*/
