#include "std.h"
#define OB "/players/bastion/isle/wiz/vault2"

int shield, is_locked, is_closed;
object key, PARTNER;

#undef EXTRA_RESET
#define EXTRA_RESET extra_reset();

extra_reset() {
     if(!shield)
          shield=1;
     is_locked=1;
     is_closed=1;
     set_both_doors();
     security();
}

#undef EXTRA_INIT
#define EXTRA_INIT extra_init();

extra_init() {
     add_action("open", "open");
     add_action("close", "close");
     add_action("unlock", "unlock");
     add_action("lock", "lock");
     add_action("west", "west");
}

ONE_EXIT("players/bastion/isle/wiz/prison_hall", "east",
     "Vault Entrance",
     "You enter a small, bare room, dimly lit by a single fixture on\n"+
     "the ceiling. A large, vaulted door leads west, while the hallway\n"+
     "is east.\n",
     1)


open(str) {
     if(!str||str!="door")
          return 0;
     if(is_locked) {
          write("The door is locked.\n");
          return 1; }
     is_closed=0;
     write("Ok.\n");
     set_both_doors();
     return 1;
}

close(str) {
     if(!str||str!="door")
          return 0;
     is_closed=1;
     write("Ok.\n");
     set_both_doors();
     return 1;
}

unlock(str) {
     if(!str||str!="door")
          return 0;
     if(!present("strange key", this_player())) {
          write("You don't have the key.\n");
          return 1; }
     is_locked=0;
     write("Klick!\n");
     if(this_player()->query_level() < 40) {
          write("Odd....the key seems to have disappeared.\n");
          destruct(present("strange key", this_player())); }
     set_both_doors();
     return 1;
}

lock(str) {
     if(!str||str!="door")
          return 0;
     if(!present("strange key", this_player())) {
          write("You don't have the key.\n");
          return 1; }
     if(!is_closed) {
          write("You must close the door.\n");
          return 1; }
     is_locked=1;
     write("Klick!\n");
     set_both_doors();
     return 1;
}

west() {
     if(is_closed) {
          write("The vault door is closed.\n");
          return 1; }
     if(shield) {
          write("An unseen voice asks, 'Key Code?': ");
          input_to("shield"); 
          return 1; }
     write("You pass through the field...\n");
     this_player()->move_player("west#players/bastion/isle/wiz/vault2");
     return 1;
}

set_shield(i) { shield=i; }
set_is_closed(c) { is_closed=c; }
set_is_locked(l) { is_locked=l; }

shield(i) {
     object castle;
     int test, sort, x;
     castle=find_object("players/bastion/castle");
     test=castle->query_code();
     sort=sscanf(i, "%d", x);
     if(!intp(x)) {
          write("Enter numeric values only.\n");
          return 1; }
     if(x!=test) {
          write("Sorry, that is incorrect.\n");
          return 1; }
     shield=0;
     set_both_doors();
     return 1;
}

query_shield() { return shield; }

set_both_doors() {
     PARTNER=find_object(OB);
     PARTNER->set_shield(shield);
     PARTNER->set_is_closed(is_closed);
     PARTNER->set_is_locked(is_locked);
     return 1;
}

realm() { return "NT"; }

security() {
  object ob;
  ob=first_inventory(this_object());
  while(ob) {
     if(ob->is_player()) {
         tell_object(ob, "The vault's security system resets itself.\n");
         if(call_other(ob, "query_level") < 40) {
            move_object(ob, "players/bastion/isle/wiz/prison_hall");
            tell_room(this_object(), ob->query_name() + " disappears.\n");
            tell_object(ob, "You suddenly find yourself elsewhere.\n"); }
      }
     ob=next_inventory(ob); }
     ob=find_object("players/bastion/isle/wiz/prison_hall");
     ob->reset();
     return 1;
}
