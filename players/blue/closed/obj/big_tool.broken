#define FILE "/open/temp_func.c"
#define W(x) write_file(FILE, x);
#define TP this_player()
#define TO this_object()
#define ENV(x) environment(x);
#define ENVTP environment(TP);
#define THIS_FILE "/players/blue/closed/obj/tool.c"
#define TOOL_HELP "/players/blue/help/tool_help"
#define MACRO_HELP "/players/blue/help/macro_help"


string *paths;

id(str) { return str == "tool" || str == "lpc-tool"; }

short() { return "An LPC tool"; }

long() { write("An LPC tool. Type 'help tool' for commands.\n"); }

get() { return 1; }

query_weight() { return 0; }

query_value() { return 0; }

reset(arg) {
  int n;
   if(arg) return;

   n = 0;
   paths = allocate(10);
    while(n < 10) paths[n++] = allocate(2);
   n = 0;
   while(n < 10) {
      paths[n] = ({ "0", "0" });
      n++;
   }

}


query_auto_load() {
   string junk;
   int n;
   junk = "0";
   n = 0;
   junk = implode(paths[n],"*");
   n = 1;
   junk += "#";
   while(n < 10) {
      junk += implode(paths[n], "*");
      junk += "#";
      n+=1;
   }
   return THIS_FILE +":"+junk;
}

init_arg(str) {
   string junk, tmp;
   int n;
   n = 0;
   junk = explode(str, "#");
   sscanf(junk[0], "%s*%s", paths[0][0], paths[0][1]);
   while(n < 10) {
      sscanf(junk[n], "%s*%s", paths[n][0], paths[n][1]);
      n+=1;
   }
   return 1;
}
init() {
   
   if(TP->query_level() < 21) destruct(TO);
  
   add_action("make_function", "lpc");
   add_action("add_path","setpath");
   add_action("show_paths","showpath");
   add_action("change_path","path");
   add_action("help_fun","help");
   add_action("tool_me","tool");


}

make_file() {
    W("#define TP this_player()\n#define FP(x) find_player(x)\n");
   W("#define ENV(ob) environment(ob)\n#define FO(ob) find_object(ob)\n");
   W("#define PR(x, y) present(x, y)\n#define FL(x) find_living(x)\n");
   W("#define TEOB(ob, mesg) tell_object(ob, mesg)\n");
   W("id(str){destruct(this_object());}\n");
   W("short(){destruct(this_object());}\n");
   W("temp_function(){\n   string temp;\n   temp = ");
   return 1;
}

end_file() {
   W("\nwrite(temp+\"\\n\");\n}\n");
   return 1;
}

clear(file) {
   object old;
   old = find_object(file);
   while(old) {
      destruct(old);
      old = find_object(file);
   }
   rm(file);
   return 1;
}

make_function(text) {
   string file, tmp;
   if(!text) {
      write("usage: 'lpc <code>'.\n");
      return 1;
   }
   tmp = explode(text, "");
    if(tmp[sizeof(tmp)- 1] != ";") {
      write("You must end the code with a ';'.\n");
      return 1;
   }
   file = FILE;
   clear(FILE);
   make_file();
   W(text);
   end_file();
   call_out("clear",1,file);
   call_other(FILE, "reset", 0);
   call_other(FILE, "temp_function", 0);
   clear(FILE);
   write("End.\n");
   return 1;
}

change_path(path) {
   int n;
   if(!path) {
      command("cd /players/"+this_player()->query_real_name(), this_player());
      return 1;
   }
   n = 0;
   while( n < 10) {
      if(paths[n][1] == path) {
         write("Found "+paths[n][0]+".\n");
         command("cd "+paths[n][0], this_player());
         return 1;
      }
      n+=1;
   }
   return 1;
}

add_path(str) {
   string path, alias;
   int n;
   if(sscanf(str, "%d %s %s", n, path, alias) == 3) {
      if(n > 10 || n < 1) {
         write("You only have paths 1 - 10.\n");
         return 1;
      }
      paths[--n][0] = path;
      paths[n][1] = alias;
      write("Done.\n");
      return 1;
   }
   if(sscanf(str,"%s %s", path, alias) == 2) {
      n = 0;
      while(n < 10) {
         if(paths[n][0] == "0") {
            paths[n][0] = path;
            paths[n][1] = alias;
            write("Done.\n");
            return 1;
         }  
         n+=1;
      }
      write("All paths are taken.  You must overwrite an old path.\n");
   }
    write("Usage: 'setpath  (<num>) <pathname> <alias>'.\n");
   write("If no number is given, an existing blank will be used.\n");
   return 1;
}

show_paths() {
   int n;
   n = 0;
   while(n < 10) {
      if(paths[n][1] != "0") {
         write("Path: "+paths[n][0]+"\nAlias: "+paths[n][1]+"\n\n");
      }
      n++;
   }
  return 1;
}

help_fun(str) {
   string chunk;
   if(str == "tool") {
      chunk = read_file(TOOL_HELP);
      write(chunk+"\n");
      return 1;
   }
   if(str == "macros") {
      chunk = read_file(MACRO_HELP);
      write(chunk+"\n");
      return 1;
   }
}

tool_me(name) {
   object who;
   if(!name) return;
   who = find_player(name);
   if(!who) {
      write("Cannot find "+who+" on the game.\n");
      return 1;
   }
   if(present("lpc-tool", who)) {
      write("That players already has an LPC tool.\n");
      return 1;
   }
   move_object(clone_object(THIS_FILE), who);
   write("Ok.\n");
   tell_object(who, "You now have an LPC tool.\n");
   return 1;
}
