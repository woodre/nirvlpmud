/* *************************************************************************
 * /players/earwax/closed/shardak/new/gob/gob.c
 *
 * Shardak Guild Object
 *
 * - Earwax 12/26/03
 *
 * Keep this as small as possible.
 *
 * *************************************************************************
*/

#include "../defs.h"

inherit WAXFUNS;

/* Global Variables */
static   object    Owner;        /* Who the gob belongs to                */
static   string    Name;         /* real_name of the owner                */
static   int       Level;        /* Level of Owner                        */
static   mapping   Commands;     /* all commands they can use             */
static   mapping   Components;   /* Components Required for Spells        */

         status    Muffled;      /* channel muffled or not                */
         int       GLevel;       /* Guild Level                           */
         int       GRank;        /* Guild Rank (Master, etc)              */
         string    RName;        /* Specific/speacial rank name           */
         int       GXP;          /* Total Guild Experience                */         

/* Prototypes */
status save_info();

/* ******
 * temporary debug
 *
*/
void tell_wax(string info) {
  object ob;

  if (ob = find_player("earwax")) tell_object(ob,info);
}


/* *************************************************************************
 * Query/set functions
 *
*/

void set_muffle(status flag)  { Muffled = flag;    }
void toggle_muffle()          { Muffled = ( Muffled ? 1 : 0); }
status query_muffle()         { return Muffled; }

void set_rname(string arg) { RName = arg; }
string query_rname() { return RName; }

int query_gxp() { return GXP; }
int query_glevel() { return GLevel; }
int query_grank() { return GRank; }

void add_gxp(int x) { if (!intp(x)) return; GXP += x; }
void add_GRank(int x) { if (!intp(x)) return; GRank += x; }
void add_GLevel(int x) { if (!intp(x)) return; GLevel += x; }

void set_gxp(int x) { if (!intp(x)) return; GXP = x; }
void set_GRank(int x) { if (!intp(x)) return; GRank = x; }
void set_GLevel(int x) { if (!intp(x)) return; GLevel = x; }

/* *************************************************************************
 * Reset, load_info, save_info
 *
*/

void
reset(status arg)
{

  if (arg)
    return;

  return;
}

status
load_info()
{
  Muffled = GLevel = GRank = GXP = 0;
  RName = "";
 
  if (file_size("/"+SAVEPATH+Name) < 0)
  {
    Muffled = 0;
    return 1;
  }

  restore_object("/"+SAVEPATH+Name);
  return 1;
}

status
save_info()
{
  string fname;
  fname = SAVEPATH+Name;
  save_object(fname);

  return 1;
}

/* *************************************************************************
 * Item setup functions
 *
*/

status get() { return 1; }
status drop() { return 1; }
int query_weight() { return 0; }
int query_value() { return 0; }

string query_auto_load() { return AUTOLOAD; }

status 
id(string arg)
{ 

  return ( 
    arg == GOB_ID ||
    arg == "guild_object"
  );
}

string 
extra_look()
{
  if (environment(this_object()) == this_player())
    return "The "+RED+"Mark of Shardak"+NORM+" is carved into your right hand";
  else
    return capitalize((string)environment(this_object())->query_name()) +
      " has the "+RED+"Mark of Shardak"+NORM+NORM+" carved into "+
      (string)Owner->query_possessive()+ " right hand";
}

string
short()
{ 
  return 0;
}

long()
{
  write("This is a sample guild object.\n");
}

/* *************************************************************************
 * command_hook
 *
 * This basically does all the checks for pk status, glevel, grank, hp cost, sp cost,
 * components, and then removes the cost, if neccesary, or gives appropriate
 * failure messages.  I do it here to keep the commands files themselves smaller
 * and because it's probably somewhat more efficient, although that's hard to say.
*/

int
command_hook(string arg)
{
  string verb;
  string *t;
  object *comps;
  int ret, hp, sp, i;

  if (member_array(Name, MAGI) < 0 && Level > 19)
  {
    notify_fail(HIK+"Shardak tells you, '"+RED+"I do not approve."+HIK+"'\n"+NORM+NORM);
    return 0;
  }

  verb = query_verb();

  /* Checks for various requirements to use commands */

  if (GLevel < Commands[verb][1])
  {
    notify_fail(HIK+"Shardak tells you, '"+HIR+"You are not adept enough in my arts for this yet."+HIK+"'\n"+NORM+NORM);
    return 0;
  }

  if (GRank < Commands[verb][2])
  {
    notify_fail(HIK+"Shardak tells you, '"+HIR+"You do not rank high enough in my army for this."+HIK+"'\n"+NORM+NORM);
    return 0;
  }

  if ((status)this_player()->query_pl_k() < Commands[verb][5])
  {
    notify_fail(HIK+"Shardak tells you, '"+HIR+"You are too cowardly to use my powers."+HIK+"'\n"+NORM+NORM);
    return 0;
  }

  hp = Commands[verb][3]; sp = Commands[verb][4];

  if ((int)this_player()->query_hp() < hp)
  {
    notify_fail(HIR+"You lack the "+HIK+"HP"+HIR+" required.\n"+NORM+NORM);
    return 0;
  }

  if ((int)this_player()->query_sp() < sp)
  {
    notify_fail(HIR+"You lack the "+HIK+"SP"+HIR+" required.\n"+NORM+NORM);
    return 0;
  }

  if (!Components || !Components[verb])
  {
    ret = (int)Commands[verb][0]->main(arg);

    if (ret)
    {
      this_player()->add_hp(hp);
      this_player()->add_sp(sp);
    }

    return ret;
  }

  i = sizeof(t = Components[verb]);
  comps = allocate(i);

  while(i--)
  {
    comps[i] = present(t[i], Owner);

    if (!comps[i])
    {
      notify_fail(HIR+"You suddenly realize that you're missing a vital component for this spell.\n"+NORM+NORM);
      return 0;
    }
  }

  ret = (int)Commands[verb][0]->main(arg);

  if (!ret)
    return 0;

  this_player()->add_hp(hp);
  this_player()->add_sp(sp);
  i = sizeof(comps);

  while(i--)
    destruct(comps[i]);

  return 1;

}

/* *************************************************************************
 * init
 *
*/

void
init()
{
  int i;
  string *t;

  if (environment() != this_player())
    return;

  if (Owner)
    return;

  Owner = this_player();
  Name = (string) Owner->query_real_name();
  Level = (int)Owner->query_level();

  if (Level >= 20 && member_array(Name, ALLOW_CLONE) < 0)
  {
    write(HIK+"Shardak tells you, '"+NORM+RED+"Get your own guild, infidel."+HIK+"'\n"+NORM+NORM);
    destruct(this_object());
    return;
  }

  load_info();

  if (member_array(Name, MAGI) > -1)
  {
    GLevel = 50; GRank = 50; RName = "Magus";
  }

  Commands = (mapping)COMMANDSD->get_commands((member_array(Name, MAGI) > -1));
  i = sizeof(t = m_indices(Commands));

  while (i--) { add_action("command_hook",t[i]); write(t[i]+"\n"); }

/* Temporary, will take invis wizzes out of this later */
  CHANNELD->channel_msg(GD_FORMAT+capitalize(Name)+" has entered the game.\n");
  cat(NEWS);

}

