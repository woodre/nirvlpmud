#include "/players/wocket/closed/ansi.h"
#include "/players/wocket/mages/def.h"

string arg;
string type;
string sect;
string spellname;

int pagenumber;
int castingtime;
int spcost;
int hpcost;
int muffled;
int coincost;

object mage;
object spell;
object target;
object guildroom;
object mageautoload;

id(str){ return (str == "spellbook" || str == "mageguildob" || str == "secret_mage_guild_ob_name" ||
                 str == "notarmor"); }
get(){ return 0; }
drop(){ return 1; }
weight(){ return 0; }
value(){ return 0; }

short(){
  string SPC;
  SPC = get_typecolor(sect);
  return SPC+"A leather bound spellbook"+NORM; 
}

long(){
  object page;
  page = first_inventory(this_object());
  write("This is a finely, leather bound book.  Age had obviously taken\n"+
        "its told upon the outer covering, with cracks running through\n"+
        "out.  Silk ribbons furrow from its edges, marking well keep\n"+
        "secrets and spells.  Light whisps around it giving the most\n"+
        "gentle of auras.  It becons to be 'read'.\n");
  write("    The book contains:\n");
  write("Index\n");
  while(page){
    write(page->short()+"\n");
    page = next_inventory(page);
  }
}

reset(){
  set_heart_beat(1);
  castingtime = -2;
}

init(){
  mage = this_player();
  mageautoload = MAGEAUTO;
  add_action("rippage","rip");
  add_action("sewpage","sew");
  add_action("cast","cast");
  add_action("read","read");
  add_action("refocus","refocus");
  add_action("cmd_hook");add_xverb("");
  CHANNELD->resetchannel();
  set_title();
  mage->set_guild_name("mages");
}

cmd_hook(str){
  string temp;
  string arg1,arg2;
  if(castingtime > -1){
    write("You break your focus and lose your spell.\n");
    clear_spell();
  }
  if(sscanf(str,"%s %s",arg1,arg2) != 2){
    arg1 = str; 
  }
  temp = "/players/wocket/mages/cmds/"+arg1+".c";
  if(file_size(temp) > 0){
    if(temp->cmd(arg2))
       return 1;
  }
  return 0;
}

heart_beat(){
  object target;
  int failrate; 
  castingtime --;
  
  if(castingtime > -1){
    say("Casting...\n");
    if(castingtime == 0 && spell){
      say("check 1.\n");
      if(check_spell()){
        say("check 2.\n");
        spell->add_cost(mage);
        say("check 3.\n");
        failrate = 25 - ((mage->query_attrib("wil")+mage->query_attrib("int"))/2);
        if(sect == type) failrate = 0;
        say("check 4.\n");
        if(random(100) < failrate){
          say("Something goes wrong.\nYour spell fizzles.\n");
          clear_spell();
        }
        else {
          say("check 5.\n");
          spell->cast_spell(mage);
          say("check 6. \n");
          clear_spell();
        }
      }
    }
  }
  mage->add_spell_point(2);
}


cast(str){
  object page;
  string tar;
  string SPC;
  if(!str){
    notify_fail("What would you like to cast?\n");
    return 0;
  }
  if(sscanf(str,"%s at %s",spellname,tar) != 2)
    spellname = str;
  if(spellname == "spell"){
    notify_fail("Which spell would you like to cast?\n");
    return 0;
  }
  page = present(spellname,this_object());
  if(!page){
    notify_fail("You do not know how to cast "+spellname+".\n");
    return 0;
  }
  if(mage->test_dark()){
    notify_fail("You can not see your spell book.\n");
    return 0;
  }
  spell = page;
  arg = tar;
  if(!check_spell()) return 1;
  if(mage->query_sp() < spcost + 5){
    notify_fail("You do not have enought mana to cast "+spellname+".\n");
    return 0;
  }
  if(mage->query_weapon()){
    notify_fail("You cannot cast a spell while wielding a weapon.\n");
    return 0;
  }
  mage->add_spell_point(-5);
  SPC = get_typecolor(type);
  write("You intone some ancient words.\n");
  say(mage->query_name()+" intones some ancient words.\n");
  write(SPC+"["+NORM+"You begin to cast "+spellname+SPC+"]"+NORM+".\n");
  return 1;
}

check_spell(){
  set_spell(spell);
  if(mage->query_sp() < spcost){
    write("You do not have enough mana to cast "+spellname+".\n");
    clear_spell();
    return 0;
  }
  if(mage->query_hp() < hpcost){
    write("You do not have enough health to cast "+spellname+".\n");
    clear_spell();
    return 0;
  }
  if(mage->query_money() < coincost){
    write("You do not have enough money for components to cast "+spellname+".\n");
    clear_spell();
    return 0;
  }
  if(spell->check_spell(mage,arg))
    return 1;
  clear_spell();
  return 0;
}

set_spell(spell){
  spcost = spell->query_spcost();
  hpcost = spell->query_hpcost();
  coincost = spell->query_coincost(); 
  castingtime = spell->query_time();
  type = spell->query_type();
}

clear_spell(){
  spcost = 0;
  hpcost = 0;
  coincost = 0;
  spell = 0;
  target = 0;
  type = 0;
  castingtime = -1;
}

get_target(arg){
  if(!arg && mage->query_attack())
    return mage->query_attack();
  if(arg && present(arg,environment(mage)))
    return present(arg,environment(mage));
  if(arg && present(arg,mage))
    return present(arg,mage);
  return 0;
}

target_ok(target){
  if(target->is_player() && !target->query_interactive()) return 0;
  if(target == mage->query_attack()) return 1;
  if(target->is_npc()) return 1;
  if(target == mage) return 0;
  if(environment(target)->GUILD_PK()) return 1;
  if(target->query_fight_area() && mage->query_fight_area()) return 1;
  if(target->query_pl_k() && mage->query_pl_k()) return 1;
  return 0;
}

rippage(str){
  string str2;
  object page;
  if(!str){
    notify_fail("What would you like to rip?\n");
    return 0;
  }
  page = present(str,this_object());
  if(page){
    move_object(page,mage);
    write("You rip "+str+" from the book.\n");
    str2 = page->query_spellname();
    str2 = implode(explode(str2," "),"_");
    mageautoload->remove_page(str2);
    pagenumber -= page->query_pages();
    return 1;
  }
  notify_fail("You could'nt find "+str+" in the book.\n");
  return 0;
}
    
sewpage(str){
  string str2;
  object page;
  if(!str){
    notify_fail("What would you like to sew?\n");
    return 0;
  }
  page = present(str,this_player());
  if(page && page->query_w_spell()){
    if(pagenumber + page->query_pages() > 50){
      write("Your book can not carry that many pages.\n");
      return 1;
    }
    move_object(present(str,mage),this_object());
    write("You sew "+str+" into your book.\n");
    str2 = page->query_spellname();
    str2 = implode(explode(str2," "),"_");
    mageautoload->add_page(str2);
    pagenumber += page->query_pages();
    return 1;
  }
  notify_fail("You can't sew "+str+" into the book.\n");
  return 0;
}

read(str){
  object page;
  if(!str){
    notify_fail("What would you like to read?\n");
    return 0;
  }
  page = present(str,this_object());
  if(page){
    page->long();
    return 1;
  }
  str = implode(explode(str," "),"_");
  if(file_size("/players/wocket/mages/docs/"+str) > 0){
    cat("/players/wocket/mages/docs/"+str);
    return 1;
  }
  notify_fail("You couldn't find that to read.\n");
  return 0;
}

refocus(){
 write("You wipe your mind of all and refocus your energies.\n");
 clear_spell();
 "/players/wocket/mages/daemons/channelD.c"->resetchannel();
 set_heart_beat(1); 
 return 1;
}

set_title(){
  string title;
  switch(sect){
    case "summon":   title = HIB+"the Warlock"+NORM; break;
    case "enchant":  title = HIY+"the Enchanter"+NORM; break;
    case "necro":    title = HIM+"the Necromancer"+NORM; break;
    case "sorcery":  title = HIR+"the Sorceror"+NORM; break;
    case "illusion": title = HIC+"the Illusionist"+NORM; break;
    case "general":  title = CYN+"the Mage"+NORM;break;
    default:         title = "the Magician"+NORM; break; 
  }
  mage->set_title(title);
}

get_typecolor(str){
  string color;
  switch(str){
    case "summon":  color = HIB; break;
    case "enchant": color = HIY; break;
    case "necro":   color = HIM; break;
    case "sorcery": color = HIR; break;
    case "illusion":color = HIC; break;
    case "general": color = CYN; break;
    default: color = ""; break;
  }
  return color;
}

set_sect(str){ sect = str; }
set_muffle(i){ muffled = i; }
set_pagenumber(i){ pagenumber = i; }
set_guild_room(obj){ guildroom = obj; }

query_sect(){ return sect; }
query_muffled(){ return muffled; }
query_guildroom(){ return guildroom; }


