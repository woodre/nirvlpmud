
			Room inherit.
      /players/vertebraker/closed/std/room.c
		12-xx-01.  tem164@psu.edu
		..-------------..----..
    		I.   Sensory Perception.
		II.  Searching..
		III. Extra Messages
		IV.  Properties
		V.   Additional goodies
		..-------------..----..

I. Sensory Perception.

      All of these automatically tag on a \n.  So don't write it.
      Use "main" as the first argument of the functions for a player
      to be able to "smell", for example, without specifying an object.

	"listen": Use add_listen("main", "You hear a raindrop.");
      "smell":  Use add_smell("cow",   "The cow's ass smells cowish!");

      The player must specify an argument for these, so "main" will not work.
      "taste":  Use add_taste("book",  "The book tastes bookly.");
      "touch":  Use add_touch("orb",   "The orb feels orby.");

II. Searching.

	I automatically allow any room to be searchable, including any string
	specified.

      It prints the messages:
       "You search generally, but find nothing.\n"
       	&
       "You search <blah>, but find nothing.\n"
	To put in custom code, simply recode the cmd_search() function.

III. Extra Messages.

	Room:
		Messages that appear in places like Fiendsville, that can add
		to the overall theme of the area are provided for here.

		set_chance(int) : Set the percent chance for a chat to fire
			off per second.  i.e. set_chance(10); <- 10% chance
		add_msg(string): Add a message to the list of possible msgs.
			A message is selected randomly when the chat fires off.
	Exit:
		Messages that are displayed to the user and/or to the room when
		the user leaves.

		add_exit_msg(string direction, mixed arg):
			Where "direction" is the cmd that the user types to leave,
			and "arg" is either an array of the two messages, or
			a string presenting the text that the user sees.

		The first element in the array is unformatted.  You need
		the \n here.  This string is sent to the user.
		The second element is optional.  You still need a \n here.
		It automatically preattaches the user's name before the message,
		so just do something like:

		add_exit_msg("west", "You plunge west, into the forest.\n",
				         "plunges west, into the forest.\n");

IV.  Properties.

	These handle special properties of rooms through use of a small text
	code plugged into a function.  This is to quicken the code needed
	to create places such as PK zones.

	add_property(string x): Add a property "x".
	remove_property(string x): Remove a property "x".

	No-fight: "NF"	Pk:  "PK"	           Spar: "SPAR"  <- heh.
	No-magic: "NM"    No-teleport: "NT"      No-follow: "NF"

V.  Additional goodies.

	query_long(): Returns long_desc.
	set_items(array a): Set items array to a.
	Players can look in any valid direction and see what's there.
	set_long(string x): Set the long description to x.
	set_short(string x): Set the short description to x.
      add_object(string x, int times): Clones object x.
		The integer "times" is optional [defaults to 1], but
		you may specify the amount of times you which to clone x.
	The room automatically puts in punctuation, removes extra new
		lines, and so forth in your item code.  It also
		tolerates additional punctuation, such as ? and !

