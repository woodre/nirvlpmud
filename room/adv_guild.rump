#include <ansi.h>

#include "std_old.h"
#include "tune.h"

#undef EXTRA_RESET
#define EXTRA_RESET extra_reset(arg);
/* Extra conditions for attributes - added by Illarion on
 * 10/27/02
 */
#define ATTRIBS_PER_LEVEL 7
#define ATTRIBS_ABOVE_LEVEL 10 
#define MAX_FREE_ATTRIB 10
#define TOTAL_FREE_ATTRIB 80


extra_reset(arg) {
  object ob;

  if (arg) return;

/*  commented out by verte .. obsolete obj
  move_object("obj/book", this_object());
*/
  move_object(clone_object("/obj/HUD"), this_object());
  move_object(clone_object("obj/bull_board"), this_object());
  "room/quest_room.c"->short();
  if(!present("orc_slayer", find_object("room/quest_room.c"))) {
    ob = clone_object("obj/quest_obj");
    call_other(ob, "set_name", "orc_slayer");
    ob->set_hint("Retrieve the Orc slayer from the evil orc shaman, and " +
                 "give it to Leo.\n");
    move_object(ob, "room/quest_room");
  }
}

#undef EXTRA_INIT
#define EXTRA_INIT\
add_action("cost_for_level", "cost");\
add_action("advance", "advance");\
add_action("south", "south");\
add_action("banish", "banish");\
add_action("raise", "raise");\
add_action("list_quests", "list");

/* added dex and cha to commands (Illarion 10/27/02) */

THREE_EXIT("room/vill_road2", "north",
           "open/info/room",  "west",
           "room/exlv_guild", "up",
   "The adventurers guild",
   "You have to come here when you want to advance your level.\n" +
   "You can also buy points for a new level.\n" +
   "Commands: " + HIW + "cost    advance    list #.\n"+
   "raise " + NORM + CYN + "<str, sta, wil, mag, pie, ste, luc, int, dex, " +
   "cha>\n" + NORM +
   "There are some stairs leading up to the second level.\n" +
   "There is an opening to the south, and some shimmering\n" +
   HIB + "blue light" + NORM + " in the doorway.\n"+
   "You see a small side area off to the west.\n",
   1)

int next_level, valexp, next_exp, level, exp;
string title, guname;
object player_ob;
string banished_by;

get_level(str) {
  level = str;
  next_exp = get_next_exp(level);
  next_level = level + 1 ;   
  player_ob = this_player();
  title = get_new_title(level);
}    

string *male_title_str, *fem_title_str, *neut_title_str;

get_new_title(str) {
  if (str < 0 || str > 19) return "the wizard";
  if (!male_title_str) {
    male_title_str = ({
      "the utter novice", "the simple wanderer", "the lowrank ranger",
      "the master ranger", "the small fighter", "the experienced fighter",
      "the small adventurer", "the experienced adventurer",
      "the great adventurer", "the warrior", "the champion", "the conjurer",
      "the apprentice magician", "the magician", "the enchanter", "the warlock",
      "the apprentice sorcerer", "the master sorcerer",
      "the grand master sorcerer", "the apprentice Wizard"
    });
  }
  if (!fem_title_str) {
    fem_title_str = ({	
      "the utter novice", "the simple wanderer", "the lowrank ranger",
      "the master ranger", "the siren", "the charming siren",
      "the small adventuress", "the experienced adventuress",
      "the great adventuress", "the amazon", "the deadly amazon",
      "the conjuress", "the apprentice magicienne", "the magicienne",
      "the enchantress" , "the witch", "the apprentice sorceress",
      "the master sorceress", "the grand master sorceress",
      "the apprentice Wizard"
    })
  }
  if (!neut_title_str) {
    neut_title_str = ({
      "the utter creature", "the simple creature", "the furry creature",
      "the bugbear", "the wraith", "the shadow", "the threatening shadow",
      "the small monster", "the medium monster", "the experienced monster",
      "the great monster", "the beholder", "the small demon",
      "the powerful demon", "the small dragon", "the devious dragon",
      "the vicious dragon", "the small tyrannosaur",
      "the ferocious tyrannosaur", "the apprentice Wizard"
    })
  }

  if (!player_ob || player_ob->query_gender() == "creature")
    return neut_title_str[str];
  else if (player_ob->query_gender() == "male")
    return male_title_str[str];
  else return fem_title_str[str];
}

int *exp_str;

get_next_exp(str) {
  if (!exp_str) {
    exp_str = ({
      0, 1014, 1771, 2332, 5885, 12812, 26662, 39993, 59995, 90000,
      134998, 195591, 295592, 492294, 620026, 820028, 1040028,
      1367106, 2000000, 6900000
    })
  }
  if ((str >= 0) && (str < 20)) return exp_str[str];
  else return 0;
}

/*
 * This routine is called by monster, to calculate how much they are worth.
 * This value should not depend on the tuning.
 */

query_cost(l) {
  player_ob = this_player();
  level = l;
  if (level >= 20) return 2000000;
  get_level(level);
  valexp = 12*next_exp/30;
  if (level < 6) valexp = next_exp;
  return valexp;
}

/*
 * Special function for other guilds to call. Arguments are current level
 * and experience points.
 */
query_cost_for_level(l, e) {
  level = l;
  exp = e;
  get_level();
  if (next_exp <= exp) return 0;
  return (next_exp - exp) * 1000 / EXP_COST;
}

cost_for_level() {
  player_ob = this_player();
  level = player_ob->query_level();
  if (level >= 20) {
    notify_fail("You will have to seek other ways.\n");
    return 0;
  }
  exp = player_ob->query_exp();
  get_level(level);
  if (next_exp <= exp) {
    notify_fail("It will cost you nothing to be promoted.\n");
    return 0;
  }
  if ((next_exp - exp) > next_exp/10 || (next_exp - exp) > 15000) {
    notify_fail("You must be closer to the next level before buying " +
                " experience.\n");
    return 0;
  }

  write("It will cost you " + (next_exp - exp) * 1000 / EXP_COST +
        " gold coins to advance to level " + next_level + ".\n");
  return 1;
}

advance() {
  string name_of_player;
  int cost;

  player_ob = this_player();
  if ((string)this_player(0->query_guild_name() == "paladin") {
    notify_fail("You must advance at your guild hall.\n");
    return 0;
  }
  name_of_player = player_ob->query_name();
  level = player_ob->query_level();
  if (level < 0) level = 0;
  exp = player_ob->query_exp();
  title = player_ob->query_title();
  if (level >= 20) {
    notify_fail("You are still " + title + "\n");
    return 0;
  }
  get_level(level);
  if ((int)this_player()->query_extra_level() > 15 && 
      next_level == 20 &&
      (int)this_player()->query_quest_point() < NEEDED_QP) {
    notify_fail("You have " + this_player()->query_quest_point() +
                " quest points" + " and you need " + NEEDED_QP + " of " +
                TOTAL_QP + " to become wizard.\n");
    return 0;
  }
  if (next_level == 20 &&
      (int)this_player()->query_aprv() < 3 &&
      (int)this_player()->query_extra_level() > 15) {
    notify_fail("You need the approval of three senior wizards to advance " +
                "to apprentice wizard.\n");
    notify_fail("You have " + this_player()->query_aprv() + " approvals.\n");
    return 0;
  }
  if ((int)this_player()->query_extra_level() < 16 && next_level == 20) {
    notify_fail("You must go upstairs to advance your level.\n");
    return 0;
  }
  cost = (next_exp - exp) * 1000 / EXP_COST;
  if (next_exp > exp) {
    if ((int)player_ob->query_money() < cost) {
      notify_fail("You don't have enough gold coins.\n");
      return 0;
    }
    if ((next_exp - exp) > next_exp/10 || (next_exp - exp) > 15000) {
      notify_fail("You must be closer to the next level before buying " +
                  "experience.\n");
      return 0;
    }
    player_ob->add_money(-cost);
  }
  if (next_level != 20)
    say(player_ob->query_name() + " is now level " + next_level + ".\n");
  else
    say(player_ob->query_name() + " is now level 20.\n");
  player_ob->set_level(next_level);
  player_ob->set_title(title);
  if (exp < next_exp)
    player_ob->add_exp(next_exp - exp);

  if ((string)player_ob->query_guild_name() == "shardak" &&
      present("shardak_mark", player_ob)) {
    present("shardak_mark", player_ob)->BaseXp(next_exp);
    present("shardak_mark", player_ob)->save_me();
  }

  if (next_level < 7) {
    if (next_level == 5) {
      write("You have gained the ability to cast " + HIW + "magic missile" +
            NORM+".\n");
    }
    write("\nYou are now " + name_of_player + " " + title + " (level " +
          next_level + ").\n");
    return 1;
  }
  if (next_level < 14) {
    if(next_level == 10) {
      write("You have gained the ability to cast " + HIW + "shock" + NORM +
            ".\n");
    }
    write("Well done, " + name_of_player + " " + title + " (level " +
          next_level + ").\n");
    return 1;
  }
  if (next_level < 20) {
    if(next_level == 15) {
      write("You have gained the ability to cast " + HIR + "fireball" + NORM +
            ".\n");
    }
    write("Welcome to your new class, mighty one.\n" +
          "You are now " + title + " (level " + next_level + ").\n");
  }
  if (next_level == 20) {
    shout("A new Wizard has been born.\n");
    write("A new Wizard has been born.\n" +
          "If you want a castle of your own, seek out Leo the archwizard,\n" +
          "and ask him.\n");
    return 1;
  }
  return 1;
}

/*
 * Banish a monster name from being used.
 */

banish(who) {
  level = this_player()->query_level();
  if (level < 21) return 0;
  write ("Please clone and use /obj/banish.c -Thank You-\n");
  return 1;
#if 0 /* Everything below is the old way */
  if (!who) {
    write("Who ?\n");
    return 1;
  }
  if (!call_other(this_player(), "valid_name", who)) return 1;
  if (restore_object("players/" + who)) {
    write("That name is already used.\n");
    return 1;
  }
  if (restore_object("banish/" + who)) {
    write("That name is already banished.\n");
    return 1;
  }
  banished_by = call_other(this_player(), "query_name");
  title = call_other(this_player(), "query_title");
  if (banished_by == "Someone") {
    write("You must not be invisible!\n");
    return 1;
  }
  save_object("banish/" + who);
  return 1;
#endif
}

south() {
  if ((int)this_player()->query_level() < 20) {
    notify_fail("A strong magic force stops you.\n");
    say(this_player()->query_name() + " tries to go through the field, but " +
        "fails.\n");
    return 0;
  }
  write("You wriggle through the force field...\n");
  this_player()->move_player("south#room/adv_inner");
  return 1;
}

list_quests(num) {
  int qnumber;

  if (num == "all") {
    "room/quest_room"->list_all();
    return 1;
  }
  if (num && (sscanf(num, "%d", qnumber) == 1))
    "room/quest_room"->list(qnumber);
  else "room/quest_room"->count();
  return 1;
}

query_drop_castle() { return 1; }

correct_level(player) {
  level = player->query_level();
  exp = player->query_exp();
  /* Shouldn't "correct" wizards. */
  if (level >= 20) return;
  if (level < 2) return;
  get_level(level);
  while (exp < next_exp) {
    level -= 1;
    get_level(level);
  }
  if (next_level == 20 && "room/quest_room"->count())
    get_level(18);
  player->set_level(next_level);
  player->set_title(title);
}

/* Added some additional conditions for a modified attrib system
 * see /open/illarion/attribs.txt for a list of the rules
 */

raise(str) {
  string attrib,raise,thing;
  int maxachived,new,expcost,current,minexp;
  string gname;

/* New vars needed (Illarion 10/27/02) */    
  int totalmax,totalattrib,totallevel;
  gname = this_player()->query_guild_name();

  if (str != "dex" && str != "cha" && str !="str" && str !="sta" &&
      str != "wil" && str != "mag" && str !="pie" && str != "ste" &&
      str != "luc" && str != "int") {
    write ("Raise what?\n");
    return 1;
  }
  if (this_player()->query_guild_name() == "paladin") {
    write("You must raise your attributes at your guild hall.\n");
    return 1;
  }

  if ((this_player()->query_guild_name() == "Knights Templar") &&
      !present("warrior_gob", this_player())) {
    if (str == "mag" && (int)this_player()->query_attrib("mag") > 24) {
      write("Knights Templar may not raise their magical aptitude above 25\n");
      return 1;
    }
    if (str == "ste" && (int)this_player()->query_attrib("ste") > 19) {
      write("Knights Templar may not raise their stealth above 20\n");
      return 1;
    }
  }

  if ((int)this_player()->query_level() > 19) {
    write("wizards cannot advance attributes.\n");
    return 1;
  }
  if (str == "str") attrib = "strength";
  if (str == "sta") attrib = "stamina";
  if (str == "wil") attrib = "will_power";
  if (str == "mag") attrib = "magic_aptitude";
  if (str == "pie") attrib = "piety";
  if (str == "ste") attrib = "stealth";
  if (str == "luc") attrib = "luck";
  if (str == "int") attrib = "intelligence";
  /* two more attribs  (Illarion 10/27/02)   */
  if (str == "dex") attrib = "dexterity";
  if (str == "cha") attrib = "charisma";
   
  raise = "raise_" + attrib;
  current = this_player()->query_attrib(str);
  maxachived = this_player()->query_attrib_max(str);
  if(current > maxachived) current = maxachived;
  /* if maxachived is lower, assume we have been bonused -Bp */
  new = current + 1;

/*
  log_file("ATTRIB", this_player()->query_real_name() + " Raised " +
           attrib + " from " + current + " to " + new + "\n");
*/

/*   Old code for calculating experience cost for raising attribute
     (Illarion 10/27/02)

     if (current < 11) expcost = -ATTRIB_COST;
     if (current < 12 && current > 10) expcost = -3*ATTRIB_COST/2;
     if (current < 14 && current > 11) expcost = -ATTRIB_COST_TWO;
     if (current < 16 && current > 13) expcost = -4*ATTRIB_COST_TWO/3;
     if (current < 18 && current > 15) expcost = -ATTRIB_COST_THREE;
     if (current < 21 && current > 17) expcost = -4*ATTRIB_COST_THREE/3;
     if (current > 19) {
            write (attrib + " is at highest possible value.\n");
            return 1;
            }
*/

/*  New code for calculating attrib costs.  First force the player to allocate
 *  their free points to hit a total of 80 with no more than 10, then allow them
 *  to start spending exp, within the limit of 5 per level, and no higher
 *  than 10  ranks above the current level (Illarion 10/27/02)
 */
  totalattrib = this_player()->query_total_stats();
  totalmax = this_player()->query_total_max_atrbr();
  totallevel = this_player()->query_level() +
               this_player()->query_extra_level();
  if (gname == "mage" &&
      (attrib == "intelligence" || attrib == "magic_aptitude")) {
    if (current > 39) {
      write(attrib + " is at its highest possible value.\n");
      return 1;
    }
  }
  else if(current > 29) {
    write(attrib + " is at its highest possible value.\n");
    return 1;
  }
  /* Max 5 raises per level */
  if (totalattrib >= TOTAL_FREE_ATTRIB + (ATTRIBS_PER_LEVEL * totallevel) &&
      current > 14) {
    write("You must gain a level before raising your attributes.\n");
    return 1;
  }
  /* Attribs can't be more than 10 above current level */
  if (new > totallevel+ATTRIBS_ABOVE_LEVEL) {
    write("You cannot raise " + attrib + " higher at your current level.\n");
    return 1;
  }
  /* Finish allocating 80 free attribs before buying any, so it doesn't
   * mess the count up */      
  if (new > MAX_FREE_ATTRIB && totalattrib < TOTAL_FREE_ATTRIB &&
      totalmax < TOTAL_FREE_ATTRIB) {
    write("Finish allocating your free attributes before buying one.\n");
    return 1;
  } 
  /* Calculate the cost.  Stat raises are free if the new stat is 10 or
   * lower, and under 80 total stats have been allocated */       
  if (totalattrib < TOTAL_FREE_ATTRIB) {
    expcost = 0;
    write("You have " + (TOTAL_FREE_ATTRIB - totalattrib - 1) +
          " free customize stat points left.\n");
  } else switch(new) {
    default: expcost = 1700; break;
    case 8: 
    case 9: 
    case 10: expcost=2200; break;
    case 11: 
    case 12: expcost=3300; break;
    case 13: 
    case 14: expcost=3800; break;
    case 15: 
    case 16: expcost=5066; break;
    case 17: 
    case 18: expcost=6000; break;
    case 19: 
    case 20: expcost=8000; break;
    case 21: 
    case 22: 
    case 23: expcost=12000; break;
    case 24: 
    case 25: 
    case 26: expcost=20000; break;
    case 27: 
    case 28: 
    case 29: expcost=28000; break;
    case 30: expcost=35000; break;
  }
  expcost = -expcost;
  if (maxachived > current && new > 20)
    expcost = -8000;
      
  /* End new cost calculations */
  if ((int)this_player()->query_extra_level() < 1)
    minexp = this_player()->query_exp() -
             get_next_exp(this_player()->query_level() - 1);
  if ((int)this_player()->query_extra_level() > 0)
    minexp = this_player()->query_exp() -
             "room/exlv_guild"->get_next_exp(this_player()->query_extra_level()-1);
  if (expcost < -minexp) {
    write("You don't have enough experience available to raise an attribute" +
          ".\n");
    return 1;
  }
  write("You spend " + (-expcost) + " experience.\n");
  this_player()->raise(1);
  if (new > maxachived)
    this_player()->add_attrib_max(str, 1);
    this_player()->add_exp(expcost);
    return 1;
}

check_level(arg) {
  int a1,a2,a3;

  a2 = arg - 1;
  a1 = get_next_exp(a2);
  return a1;
}

check_exp(arg,argb) {
  get_level(19);
  if(arg < 0) return;
  while (arg < next_exp) {
    level -= 1;
    get_level(level);
  }
  if (level + argb > 0)
    get_level(level+argb);
  else
    get_level(0);
  return next_exp;
}

query_limited_shadow() { return 1; }

set_player_ob(x) { player_ob = x; }

custom_clean(){ return 1; }
